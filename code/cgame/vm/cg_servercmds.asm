lit
align 4
LABELV validOrders
address $122
byte 4 1
address $123
byte 4 1
address $124
byte 4 2
address $125
byte 4 2
address $126
byte 4 3
address $127
byte 4 7
address $128
byte 4 4
address $129
byte 4 5
address $130
byte 4 6
align 4
LABELV numValidOrders
byte 4 9
code
proc CG_ValidOrder 8 8
file "../cg_servercmds.c"
line 32
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_servercmds.c -- reliably sequenced text commands sent by the server
;4:// these are processed at snapshot transition time, so there will definately
;5:// be a valid snapshot this frame
;6:
;7:#include "cg_local.h"
;8:#include "../../ui/menudef.h"
;9:#if !defined(CL_LIGHT_H_INC)
;10:	#include "cg_lights.h"
;11:#endif
;12:
;13:typedef struct {
;14:	const char *order;
;15:	int taskNum;
;16:} orderTask_t;
;17:
;18:static const orderTask_t validOrders[] = {
;19:	{ VOICECHAT_GETFLAG,						TEAMTASK_OFFENSE },
;20:	{ VOICECHAT_OFFENSE,						TEAMTASK_OFFENSE },
;21:	{ VOICECHAT_DEFEND,							TEAMTASK_DEFENSE },
;22:	{ VOICECHAT_DEFENDFLAG,					TEAMTASK_DEFENSE },
;23:	{ VOICECHAT_PATROL,							TEAMTASK_PATROL },
;24:	{ VOICECHAT_CAMP,								TEAMTASK_CAMP },
;25:	{ VOICECHAT_FOLLOWME,						TEAMTASK_FOLLOW },
;26:	{ VOICECHAT_RETURNFLAG,					TEAMTASK_RETRIEVE },
;27:	{ VOICECHAT_FOLLOWFLAGCARRIER,	TEAMTASK_ESCORT }
;28:};
;29:
;30:static const int numValidOrders = sizeof(validOrders) / sizeof(orderTask_t);
;31:
;32:static int CG_ValidOrder(const char *p) {
line 34
;33:	int i;
;34:	for (i = 0; i < numValidOrders; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $135
JUMPV
LABELV $132
line 35
;35:		if (Q_stricmp(p, validOrders[i].order) == 0) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 3
LSHI4
ADDRGP4 validOrders
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $136
line 36
;36:			return validOrders[i].taskNum;
ADDRLP4 0
INDIRI4
CNSTI4 3
LSHI4
ADDRGP4 validOrders+4
ADDP4
INDIRI4
RETI4
ADDRGP4 $131
JUMPV
LABELV $136
line 38
;37:		}
;38:	}
LABELV $133
line 34
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $135
ADDRLP4 0
INDIRI4
ADDRGP4 numValidOrders
INDIRI4
LTI4 $132
line 39
;39:	return -1;
CNSTI4 -1
RETI4
LABELV $131
endproc CG_ValidOrder 8 8
proc CG_ParseScores 216 12
line 48
;40:}
;41:
;42:/*
;43:=================
;44:CG_ParseScores
;45:
;46:=================
;47:*/
;48:static void CG_ParseScores( void ) {
line 51
;49:	int		i, powerups, readScores;
;50:
;51:	cg.numScores = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 12
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+5036
ADDRLP4 16
INDIRI4
ASGNI4
line 53
;52:
;53:	readScores = cg.numScores;
ADDRLP4 8
ADDRGP4 cg+5036
INDIRI4
ASGNI4
line 55
;54:
;55:	if (readScores > MAX_CLIENT_SCORE_SEND)
ADDRLP4 8
INDIRI4
CNSTI4 20
LEI4 $142
line 56
;56:	{
line 57
;57:		readScores = MAX_CLIENT_SCORE_SEND;
ADDRLP4 8
CNSTI4 20
ASGNI4
line 58
;58:	}
LABELV $142
line 60
;59:
;60:	if ( cg.numScores > MAX_CLIENTS ) {
ADDRGP4 cg+5036
INDIRI4
CNSTI4 32
LEI4 $144
line 61
;61:		cg.numScores = MAX_CLIENTS;
ADDRGP4 cg+5036
CNSTI4 32
ASGNI4
line 62
;62:	}
LABELV $144
line 64
;63:
;64:	cg.teamScores[0] = atoi( CG_Argv( 2 ) );
CNSTI4 2
ARGI4
ADDRLP4 20
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+5044
ADDRLP4 24
INDIRI4
ASGNI4
line 65
;65:	cg.teamScores[1] = atoi( CG_Argv( 3 ) );
CNSTI4 3
ARGI4
ADDRLP4 28
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+5044+4
ADDRLP4 32
INDIRI4
ASGNI4
line 67
;66:
;67:	memset( cg.scores, 0, sizeof( cg.scores ) );
ADDRGP4 cg+5052
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1920
ARGI4
ADDRGP4 memset
CALLP4
pop
line 68
;68:	for ( i = 0 ; i < readScores ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $156
JUMPV
LABELV $153
line 70
;69:		//
;70:		cg.scores[i].client = atoi( CG_Argv( i * 14 + 4 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 71
;71:		cg.scores[i].score = atoi( CG_Argv( i * 14 + 5 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+4
ADDP4
ADDRLP4 56
INDIRI4
ASGNI4
line 72
;72:		cg.scores[i].ping = atoi( CG_Argv( i * 14 + 6 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 64
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+8
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 73
;73:		cg.scores[i].time = atoi( CG_Argv( i * 14 + 7 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 76
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+12
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 74
;74:		cg.scores[i].scoreFlags = atoi( CG_Argv( i * 14 + 8 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 8
ADDI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 92
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+16
ADDP4
ADDRLP4 92
INDIRI4
ASGNI4
line 75
;75:		powerups = atoi( CG_Argv( i * 14 + 9 ) );
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 9
ADDI4
ARGI4
ADDRLP4 96
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 100
INDIRI4
ASGNI4
line 76
;76:		cg.scores[i].accuracy = atoi(CG_Argv(i * 14 + 10));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 10
ADDI4
ARGI4
ADDRLP4 108
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 108
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+24
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 77
;77:		cg.scores[i].impressiveCount = atoi(CG_Argv(i * 14 + 11));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 11
ADDI4
ARGI4
ADDRLP4 120
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+28
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 78
;78:		cg.scores[i].excellentCount = atoi(CG_Argv(i * 14 + 12));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 132
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 136
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+32
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 79
;79:		cg.scores[i].guantletCount = atoi(CG_Argv(i * 14 + 13));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 13
ADDI4
ARGI4
ADDRLP4 144
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 148
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+36
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 80
;80:		cg.scores[i].defendCount = atoi(CG_Argv(i * 14 + 14));
ADDRLP4 152
CNSTI4 14
ASGNI4
ADDRLP4 152
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 152
INDIRI4
ADDI4
ARGI4
ADDRLP4 160
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 164
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+40
ADDP4
ADDRLP4 164
INDIRI4
ASGNI4
line 81
;81:		cg.scores[i].assistCount = atoi(CG_Argv(i * 14 + 15));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 15
ADDI4
ARGI4
ADDRLP4 172
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 176
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+44
ADDP4
ADDRLP4 176
INDIRI4
ASGNI4
line 82
;82:		cg.scores[i].perfect = atoi(CG_Argv(i * 14 + 16));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 16
ADDI4
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 184
INDIRP4
ARGP4
ADDRLP4 188
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+52
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 83
;83:		cg.scores[i].captures = atoi(CG_Argv(i * 14 + 17));
CNSTI4 14
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 17
ADDI4
ARGI4
ADDRLP4 196
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 196
INDIRP4
ARGP4
ADDRLP4 200
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052+48
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 85
;84:
;85:		if ( cg.scores[i].client < 0 || cg.scores[i].client >= MAX_CLIENTS ) {
ADDRLP4 204
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 204
INDIRI4
ADDRGP4 cg+5052
ADDP4
INDIRI4
CNSTI4 0
LTI4 $186
ADDRLP4 204
INDIRI4
ADDRGP4 cg+5052
ADDP4
INDIRI4
CNSTI4 32
LTI4 $182
LABELV $186
line 86
;86:			cg.scores[i].client = 0;
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052
ADDP4
CNSTI4 0
ASGNI4
line 87
;87:		}
LABELV $182
line 88
;88:		cgs.clientinfo[ cg.scores[i].client ].score = cg.scores[i].score;
ADDRLP4 208
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
CNSTI4 788
ADDRLP4 208
INDIRI4
ADDRGP4 cg+5052
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+43008+108
ADDP4
ADDRLP4 208
INDIRI4
ADDRGP4 cg+5052+4
ADDP4
INDIRI4
ASGNI4
line 89
;89:		cgs.clientinfo[ cg.scores[i].client ].powerups = powerups;
CNSTI4 788
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg+5052
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+43008+148
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 91
;90:
;91:		cg.scores[i].team = cgs.clientinfo[cg.scores[i].client].team;
ADDRLP4 212
CNSTI4 60
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 212
INDIRI4
ADDRGP4 cg+5052+56
ADDP4
CNSTI4 788
ADDRLP4 212
INDIRI4
ADDRGP4 cg+5052
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+43008+68
ADDP4
INDIRI4
ASGNI4
line 92
;92:	}
LABELV $154
line 68
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $156
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $153
line 93
;93:	CG_SetScoreSelection(NULL);
CNSTP4 0
ARGP4
ADDRGP4 CG_SetScoreSelection
CALLV
pop
line 94
;94:}
LABELV $139
endproc CG_ParseScores 216 12
proc CG_ParseTeamInfo 68 4
line 102
;95:
;96:/*
;97:=================
;98:CG_ParseTeamInfo
;99:
;100:=================
;101:*/
;102:static void CG_ParseTeamInfo( void ) {
line 106
;103:	int		i;
;104:	int		client;
;105:
;106:	numSortedTeamPlayers = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 numSortedTeamPlayers
ADDRLP4 12
INDIRI4
ASGNI4
line 108
;107:
;108:	for ( i = 0 ; i < numSortedTeamPlayers ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $205
JUMPV
LABELV $202
line 109
;109:		client = atoi( CG_Argv( i * 6 + 2 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 111
;110:
;111:		sortedTeamPlayers[i] = client;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 113
;112:
;113:		cgs.clientinfo[ client ].location = atoi( CG_Argv( i * 6 + 3 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 3
ADDI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 788
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+43008+112
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 114
;114:		cgs.clientinfo[ client ].health = atoi( CG_Argv( i * 6 + 4 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 788
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+43008+116
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 115
;115:		cgs.clientinfo[ client ].armor = atoi( CG_Argv( i * 6 + 5 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 788
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+43008+120
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 116
;116:		cgs.clientinfo[ client ].curWeapon = atoi( CG_Argv( i * 6 + 6 ) );
ADDRLP4 48
CNSTI4 6
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 48
INDIRI4
ADDI4
ARGI4
ADDRLP4 52
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 788
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+43008+124
ADDP4
ADDRLP4 56
INDIRI4
ASGNI4
line 117
;117:		cgs.clientinfo[ client ].powerups = atoi( CG_Argv( i * 6 + 7 ) );
CNSTI4 6
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 60
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 788
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+43008+148
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 118
;118:	}
LABELV $203
line 108
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $205
ADDRLP4 0
INDIRI4
ADDRGP4 numSortedTeamPlayers
INDIRI4
LTI4 $202
line 119
;119:}
LABELV $201
endproc CG_ParseTeamInfo 68 4
export CG_ParseServerinfo
proc CG_ParseServerinfo 132 16
line 130
;120:
;121:
;122:/*
;123:================
;124:CG_ParseServerinfo
;125:
;126:This is called explicitly when the gamestate is first received,
;127:and whenever the server updates any serverinfo flagged cvars
;128:================
;129:*/
;130:void CG_ParseServerinfo( void ) {
line 134
;131:	const char	*info;
;132:	char	*mapname;
;133:
;134:	info = CG_ConfigString( CS_SERVERINFO );
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 135
;135:	cgs.gametype = atoi( Info_ValueForKey( info, "g_gametype" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $218
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32960
ADDRLP4 16
INDIRI4
ASGNI4
line 136
;136:	trap_Cvar_Set("g_gametype", va("%i", cgs.gametype));
ADDRGP4 $219
ARGP4
ADDRGP4 cgs+32960
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $218
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 137
;137:	cgs.dmflags = atoi( Info_ValueForKey( info, "dmflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $222
ARGP4
ADDRLP4 24
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32964
ADDRLP4 28
INDIRI4
ASGNI4
line 138
;138:	cgs.teamflags = atoi( Info_ValueForKey( info, "teamflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $224
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32968
ADDRLP4 36
INDIRI4
ASGNI4
line 139
;139:	cgs.fraglimit = atoi( Info_ValueForKey( info, "fraglimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $226
ARGP4
ADDRLP4 40
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32972
ADDRLP4 44
INDIRI4
ASGNI4
line 140
;140:	cgs.duel_fraglimit = atoi( Info_ValueForKey( info, "duel_fraglimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $228
ARGP4
ADDRLP4 48
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32976
ADDRLP4 52
INDIRI4
ASGNI4
line 141
;141:	cgs.capturelimit = atoi( Info_ValueForKey( info, "capturelimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $230
ARGP4
ADDRLP4 56
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32980
ADDRLP4 60
INDIRI4
ASGNI4
line 142
;142:	cgs.timelimit = atoi( Info_ValueForKey( info, "timelimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $232
ARGP4
ADDRLP4 64
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32984
ADDRLP4 68
INDIRI4
ASGNI4
line 143
;143:	cgs.maxclients = atoi( Info_ValueForKey( info, "sv_maxclients" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $234
ARGP4
ADDRLP4 72
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+32988
ADDRLP4 76
INDIRI4
ASGNI4
line 144
;144:	mapname = Info_ValueForKey( info, "mapname" );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $235
ARGP4
ADDRLP4 80
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 80
INDIRP4
ASGNP4
line 147
;145:
;146:	//rww - You must do this one here, Info_ValueForKey always uses the same memory pointer.
;147:	trap_Cvar_Set ( "ui_about_mapname", mapname );
ADDRGP4 $236
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 149
;148:
;149:	Com_sprintf( cgs.mapname, sizeof( cgs.mapname ), "maps/%s.bsp", mapname );
ADDRGP4 cgs+32992
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $239
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 150
;150:	Q_strncpyz( cgs.redTeam, Info_ValueForKey( info, "g_redTeam" ), sizeof(cgs.redTeam) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $241
ARGP4
ADDRLP4 84
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+33056
ARGP4
ADDRLP4 84
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 151
;151:	trap_Cvar_Set("g_redTeam", cgs.redTeam);
ADDRGP4 $241
ARGP4
ADDRGP4 cgs+33056
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 152
;152:	Q_strncpyz( cgs.blueTeam, Info_ValueForKey( info, "g_blueTeam" ), sizeof(cgs.blueTeam) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $245
ARGP4
ADDRLP4 88
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 cgs+33120
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 153
;153:	trap_Cvar_Set("g_blueTeam", cgs.blueTeam);
ADDRGP4 $245
ARGP4
ADDRGP4 cgs+33120
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 155
;154:
;155:	trap_Cvar_Set ( "ui_about_gametype", va("%i", cgs.gametype ) );
ADDRGP4 $219
ARGP4
ADDRGP4 cgs+32960
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $248
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 156
;156:	trap_Cvar_Set ( "ui_about_fraglimit", va("%i", cgs.fraglimit ) );
ADDRGP4 $219
ARGP4
ADDRGP4 cgs+32972
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $250
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 157
;157:	trap_Cvar_Set ( "ui_about_duellimit", va("%i", cgs.duel_fraglimit ) );
ADDRGP4 $219
ARGP4
ADDRGP4 cgs+32976
INDIRI4
ARGI4
ADDRLP4 100
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $252
ARGP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 158
;158:	trap_Cvar_Set ( "ui_about_capturelimit", va("%i", cgs.capturelimit ) );
ADDRGP4 $219
ARGP4
ADDRGP4 cgs+32980
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $254
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 159
;159:	trap_Cvar_Set ( "ui_about_timelimit", va("%i", cgs.timelimit ) );
ADDRGP4 $219
ARGP4
ADDRGP4 cgs+32984
INDIRI4
ARGI4
ADDRLP4 108
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $256
ARGP4
ADDRLP4 108
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 160
;160:	trap_Cvar_Set ( "ui_about_maxclients", va("%i", cgs.maxclients ) );
ADDRGP4 $219
ARGP4
ADDRGP4 cgs+32988
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $258
ARGP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 161
;161:	trap_Cvar_Set ( "ui_about_dmflags", va("%i", cgs.dmflags ) );
ADDRGP4 $219
ARGP4
ADDRGP4 cgs+32964
INDIRI4
ARGI4
ADDRLP4 116
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $260
ARGP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 162
;162:	trap_Cvar_Set ( "ui_about_hostname", Info_ValueForKey( info, "sv_hostname" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $263
ARGP4
ADDRLP4 120
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 $262
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 163
;163:	trap_Cvar_Set ( "ui_about_needpass", Info_ValueForKey( info, "g_needpass" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $265
ARGP4
ADDRLP4 124
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 $264
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 164
;164:	trap_Cvar_Set ( "ui_about_botminplayers", Info_ValueForKey ( info, "bot_minplayers" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $267
ARGP4
ADDRLP4 128
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 $266
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 165
;165:}
LABELV $216
endproc CG_ParseServerinfo 132 16
proc CG_ParseWarmup 16 4
line 172
;166:
;167:/*
;168:==================
;169:CG_ParseWarmup
;170:==================
;171:*/
;172:static void CG_ParseWarmup( void ) {
line 176
;173:	const char	*info;
;174:	int			warmup;
;175:
;176:	info = CG_ConfigString( CS_WARMUP );
CNSTI4 5
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 178
;177:
;178:	warmup = atoi( info );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 179
;179:	cg.warmupCount = -1;
ADDRGP4 cg+13344
CNSTI4 -1
ASGNI4
line 181
;180:
;181:	cg.warmup = warmup;
ADDRGP4 cg+13340
ADDRLP4 4
INDIRI4
ASGNI4
line 182
;182:}
LABELV $268
endproc CG_ParseWarmup 16 4
export CG_SetConfigValues
proc CG_SetConfigValues 148 4
line 192
;183:
;184:/*
;185:================
;186:CG_SetConfigValues
;187:
;188:Called on load to set the initial values from configure strings
;189:================
;190:*/
;191:void CG_SetConfigValues( void ) 
;192:{
line 196
;193:	const char *s;
;194:	const char *str;
;195:
;196:	cgs.scores1 = atoi( CG_ConfigString( CS_SCORES1 ) );
CNSTI4 6
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36308
ADDRLP4 12
INDIRI4
ASGNI4
line 197
;197:	cgs.scores2 = atoi( CG_ConfigString( CS_SCORES2 ) );
CNSTI4 7
ARGI4
ADDRLP4 16
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36312
ADDRLP4 20
INDIRI4
ASGNI4
line 198
;198:	cgs.levelStartTime = atoi( CG_ConfigString( CS_LEVEL_START_TIME ) );
CNSTI4 21
ARGI4
ADDRLP4 24
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36304
ADDRLP4 28
INDIRI4
ASGNI4
line 199
;199:	if( cgs.gametype == GT_CTF || cgs.gametype == GT_CTY ) {
ADDRGP4 cgs+32960
INDIRI4
CNSTI4 7
EQI4 $279
ADDRGP4 cgs+32960
INDIRI4
CNSTI4 8
NEI4 $275
LABELV $279
line 200
;200:		s = CG_ConfigString( CS_FLAGSTATUS );
CNSTI4 23
ARGI4
ADDRLP4 32
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 32
INDIRP4
ASGNP4
line 201
;201:		cgs.redflag = s[0] - '0';
ADDRGP4 cgs+36332
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 202
;202:		cgs.blueflag = s[1] - '0';
ADDRGP4 cgs+36336
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 203
;203:	}
LABELV $275
line 204
;204:	cg.warmup = atoi( CG_ConfigString( CS_WARMUP ) );
CNSTI4 5
ARGI4
ADDRLP4 32
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+13340
ADDRLP4 36
INDIRI4
ASGNI4
line 207
;205:
;206:	// Track who the jedi master is
;207:	cgs.jediMaster = atoi ( CG_ConfigString ( CS_CLIENT_JEDIMASTER ) );
CNSTI4 28
ARGI4
ADDRLP4 40
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36316
ADDRLP4 44
INDIRI4
ASGNI4
line 208
;208:	cgs.duelWinner = atoi ( CG_ConfigString ( CS_CLIENT_DUELWINNER ) );
CNSTI4 29
ARGI4
ADDRLP4 48
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36320
ADDRLP4 52
INDIRI4
ASGNI4
line 210
;209:
;210:	str = CG_ConfigString(CS_CLIENT_DUELISTS);
CNSTI4 30
ARGI4
ADDRLP4 56
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 56
INDIRP4
ASGNP4
line 212
;211:
;212:	if (str && str[0])
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $285
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $285
line 213
;213:	{
line 215
;214:		char buf[64];
;215:		int c = 0;
ADDRLP4 68
CNSTI4 0
ASGNI4
line 216
;216:		int i = 0;
ADDRLP4 64
CNSTI4 0
ASGNI4
ADDRGP4 $288
JUMPV
LABELV $287
line 219
;217:
;218:		while (str[i] && str[i] != '|')
;219:		{
line 220
;220:			buf[c] = str[i];
ADDRLP4 68
INDIRI4
ADDRLP4 72
ADDP4
ADDRLP4 64
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 221
;221:			c++;
ADDRLP4 68
ADDRLP4 68
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 222
;222:			i++;
ADDRLP4 64
ADDRLP4 64
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 223
;223:		}
LABELV $288
line 218
ADDRLP4 136
ADDRLP4 64
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 136
INDIRI4
CNSTI4 0
EQI4 $290
ADDRLP4 136
INDIRI4
CNSTI4 124
NEI4 $287
LABELV $290
line 224
;224:		buf[c] = 0;
ADDRLP4 68
INDIRI4
ADDRLP4 72
ADDP4
CNSTI1 0
ASGNI1
line 226
;225:
;226:		cgs.duelist1 = atoi ( buf );
ADDRLP4 72
ARGP4
ADDRLP4 140
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36324
ADDRLP4 140
INDIRI4
ASGNI4
line 227
;227:		c = 0;
ADDRLP4 68
CNSTI4 0
ASGNI4
line 229
;228:
;229:		i++;
ADDRLP4 64
ADDRLP4 64
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $293
JUMPV
LABELV $292
line 231
;230:		while (str[i])
;231:		{
line 232
;232:			buf[c] = str[i];
ADDRLP4 68
INDIRI4
ADDRLP4 72
ADDP4
ADDRLP4 64
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 233
;233:			c++;
ADDRLP4 68
ADDRLP4 68
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 234
;234:			i++;
ADDRLP4 64
ADDRLP4 64
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 235
;235:		}
LABELV $293
line 230
ADDRLP4 64
INDIRI4
ADDRLP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $292
line 236
;236:		buf[c] = 0;
ADDRLP4 68
INDIRI4
ADDRLP4 72
ADDP4
CNSTI1 0
ASGNI1
line 238
;237:
;238:		cgs.duelist2 = atoi ( buf );
ADDRLP4 72
ARGP4
ADDRLP4 144
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36328
ADDRLP4 144
INDIRI4
ASGNI4
line 239
;239:	}
LABELV $285
line 240
;240:}
LABELV $271
endproc CG_SetConfigValues 148 4
export CG_ShaderStateChanged
proc CG_ShaderStateChanged 188 12
line 247
;241:
;242:/*
;243:=====================
;244:CG_ShaderStateChanged
;245:=====================
;246:*/
;247:void CG_ShaderStateChanged(void) {
line 254
;248:	char originalShader[MAX_QPATH];
;249:	char newShader[MAX_QPATH];
;250:	char timeOffset[16];
;251:	const char *o;
;252:	char *n,*t;
;253:
;254:	o = CG_ConfigString( CS_SHADERSTATE );
CNSTI4 24
ARGI4
ADDRLP4 156
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 156
INDIRP4
ASGNP4
ADDRGP4 $298
JUMPV
LABELV $297
line 255
;255:	while (o && *o) {
line 256
;256:		n = strstr(o, "=");
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $300
ARGP4
ADDRLP4 160
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 160
INDIRP4
ASGNP4
line 257
;257:		if (n && *n) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $299
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $299
line 258
;258:			strncpy(originalShader, o, n-o);
ADDRLP4 12
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 259
;259:			originalShader[n-o] = 0;
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 12
ADDP4
CNSTI1 0
ASGNI1
line 260
;260:			n++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 261
;261:			t = strstr(n, ":");
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $303
ARGP4
ADDRLP4 172
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 172
INDIRP4
ASGNP4
line 262
;262:			if (t && *t) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $299
ADDRLP4 8
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $299
line 263
;263:				strncpy(newShader, n, t-n);
ADDRLP4 76
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 264
;264:				newShader[t-n] = 0;
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 76
ADDP4
CNSTI1 0
ASGNI1
line 265
;265:			} else {
line 266
;266:				break;
LABELV $305
line 268
;267:			}
;268:			t++;
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 269
;269:			o = strstr(t, "@");
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $306
ARGP4
ADDRLP4 180
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 180
INDIRP4
ASGNP4
line 270
;270:			if (o) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $302
line 271
;271:				strncpy(timeOffset, t, o-t);
ADDRLP4 140
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 272
;272:				timeOffset[o-t] = 0;
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 140
ADDP4
CNSTI1 0
ASGNI1
line 273
;273:				o++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 274
;274:				trap_R_RemapShader( originalShader, newShader, timeOffset );
ADDRLP4 12
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 275
;275:			}
line 276
;276:		} else {
line 277
;277:			break;
LABELV $302
line 279
;278:		}
;279:	}
LABELV $298
line 255
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $309
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $297
LABELV $309
LABELV $299
line 280
;280:}
LABELV $296
endproc CG_ShaderStateChanged 188 12
proc CG_ConfigStringModified 104 12
line 288
;281:
;282:/*
;283:================
;284:CG_ConfigStringModified
;285:
;286:================
;287:*/
;288:static void CG_ConfigStringModified( void ) {
line 292
;289:	const char	*str;
;290:	int		num;
;291:
;292:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 296
;293:
;294:	// get the gamestate from the client system, which will have the
;295:	// new configstring already integrated
;296:	trap_GetGameState( &cgs.gameState );
ADDRGP4 cgs
ARGP4
ADDRGP4 trap_GetGameState
CALLV
pop
line 299
;297:
;298:	// look up the individual string that was modified
;299:	str = CG_ConfigString( num );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 302
;300:
;301:	// do something with it if necessary
;302:	if ( num == CS_MUSIC ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $311
line 303
;303:		CG_StartMusic( qtrue );
CNSTI4 1
ARGI4
ADDRGP4 CG_StartMusic
CALLV
pop
line 304
;304:	} else if ( num == CS_SERVERINFO ) {
ADDRGP4 $312
JUMPV
LABELV $311
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $313
line 305
;305:		CG_ParseServerinfo();
ADDRGP4 CG_ParseServerinfo
CALLV
pop
line 306
;306:	} else if ( num == CS_WARMUP ) {
ADDRGP4 $314
JUMPV
LABELV $313
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $315
line 307
;307:		CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 308
;308:	} else if ( num == CS_SCORES1 ) {
ADDRGP4 $316
JUMPV
LABELV $315
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $317
line 309
;309:		cgs.scores1 = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36308
ADDRLP4 20
INDIRI4
ASGNI4
line 310
;310:	} else if ( num == CS_SCORES2 ) {
ADDRGP4 $318
JUMPV
LABELV $317
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $320
line 311
;311:		cgs.scores2 = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36312
ADDRLP4 20
INDIRI4
ASGNI4
line 312
;312:	} else if ( num == CS_CLIENT_JEDIMASTER ) {
ADDRGP4 $321
JUMPV
LABELV $320
ADDRLP4 0
INDIRI4
CNSTI4 28
NEI4 $323
line 313
;313:		cgs.jediMaster = atoi ( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36316
ADDRLP4 20
INDIRI4
ASGNI4
line 314
;314:	} else if ( num == CS_CLIENT_DUELWINNER ) {
ADDRGP4 $324
JUMPV
LABELV $323
ADDRLP4 0
INDIRI4
CNSTI4 29
NEI4 $326
line 315
;315:		cgs.duelWinner = atoi ( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36320
ADDRLP4 20
INDIRI4
ASGNI4
line 316
;316:	} else if ( num == CS_CLIENT_DUELISTS ) {
ADDRGP4 $327
JUMPV
LABELV $326
ADDRLP4 0
INDIRI4
CNSTI4 30
NEI4 $329
line 318
;317:		char buf[64];
;318:		int c = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 319
;319:		int i = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $332
JUMPV
LABELV $331
line 322
;320:
;321:		while (str[i] && str[i] != '|')
;322:		{
line 323
;323:			buf[c] = str[i];
ADDRLP4 24
INDIRI4
ADDRLP4 28
ADDP4
ADDRLP4 20
INDIRI4
ADDRLP4 4
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 324
;324:			c++;
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 325
;325:			i++;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 326
;326:		}
LABELV $332
line 321
ADDRLP4 92
ADDRLP4 20
INDIRI4
ADDRLP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
EQI4 $334
ADDRLP4 92
INDIRI4
CNSTI4 124
NEI4 $331
LABELV $334
line 327
;327:		buf[c] = 0;
ADDRLP4 24
INDIRI4
ADDRLP4 28
ADDP4
CNSTI1 0
ASGNI1
line 329
;328:
;329:		cgs.duelist1 = atoi ( buf );
ADDRLP4 28
ARGP4
ADDRLP4 96
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36324
ADDRLP4 96
INDIRI4
ASGNI4
line 330
;330:		c = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 332
;331:
;332:		i++;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $337
JUMPV
LABELV $336
line 334
;333:		while (str[i])
;334:		{
line 335
;335:			buf[c] = str[i];
ADDRLP4 24
INDIRI4
ADDRLP4 28
ADDP4
ADDRLP4 20
INDIRI4
ADDRLP4 4
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 336
;336:			c++;
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 337
;337:			i++;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 338
;338:		}
LABELV $337
line 333
ADDRLP4 20
INDIRI4
ADDRLP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $336
line 339
;339:		buf[c] = 0;
ADDRLP4 24
INDIRI4
ADDRLP4 28
ADDP4
CNSTI1 0
ASGNI1
line 341
;340:
;341:		cgs.duelist2 = atoi ( buf );
ADDRLP4 28
ARGP4
ADDRLP4 100
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36328
ADDRLP4 100
INDIRI4
ASGNI4
line 342
;342:	} else if ( num == CS_LEVEL_START_TIME ) {
ADDRGP4 $330
JUMPV
LABELV $329
ADDRLP4 0
INDIRI4
CNSTI4 21
NEI4 $340
line 343
;343:		cgs.levelStartTime = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+36304
ADDRLP4 20
INDIRI4
ASGNI4
line 344
;344:	} else if ( num == CS_VOTE_TIME ) {
ADDRGP4 $341
JUMPV
LABELV $340
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $343
line 345
;345:		cgs.voteTime = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+33184
ADDRLP4 20
INDIRI4
ASGNI4
line 346
;346:		cgs.voteModified = qtrue;
ADDRGP4 cgs+33196
CNSTI4 1
ASGNI4
line 347
;347:	} else if ( num == CS_VOTE_YES ) {
ADDRGP4 $344
JUMPV
LABELV $343
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $347
line 348
;348:		cgs.voteYes = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+33188
ADDRLP4 20
INDIRI4
ASGNI4
line 349
;349:		cgs.voteModified = qtrue;
ADDRGP4 cgs+33196
CNSTI4 1
ASGNI4
line 350
;350:	} else if ( num == CS_VOTE_NO ) {
ADDRGP4 $348
JUMPV
LABELV $347
ADDRLP4 0
INDIRI4
CNSTI4 11
NEI4 $351
line 351
;351:		cgs.voteNo = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+33192
ADDRLP4 20
INDIRI4
ASGNI4
line 352
;352:		cgs.voteModified = qtrue;
ADDRGP4 cgs+33196
CNSTI4 1
ASGNI4
line 353
;353:	} else if ( num == CS_VOTE_STRING ) {
ADDRGP4 $352
JUMPV
LABELV $351
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $355
line 354
;354:		Q_strncpyz( cgs.voteString, str, sizeof( cgs.voteString ) );
ADDRGP4 cgs+33200
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 355
;355:	} else if ( num >= CS_TEAMVOTE_TIME && num <= CS_TEAMVOTE_TIME + 1) {
ADDRGP4 $356
JUMPV
LABELV $355
ADDRLP4 0
INDIRI4
CNSTI4 12
LTI4 $359
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $359
line 356
;356:		cgs.teamVoteTime[num-CS_TEAMVOTE_TIME] = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34224-48
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 357
;357:		cgs.teamVoteModified[num-CS_TEAMVOTE_TIME] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34248-48
ADDP4
CNSTI4 1
ASGNI4
line 358
;358:	} else if ( num >= CS_TEAMVOTE_YES && num <= CS_TEAMVOTE_YES + 1) {
ADDRGP4 $360
JUMPV
LABELV $359
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $365
ADDRLP4 0
INDIRI4
CNSTI4 17
GTI4 $365
line 359
;359:		cgs.teamVoteYes[num-CS_TEAMVOTE_YES] = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34232-64
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 360
;360:		cgs.teamVoteModified[num-CS_TEAMVOTE_YES] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34248-64
ADDP4
CNSTI4 1
ASGNI4
line 361
;361:	} else if ( num >= CS_TEAMVOTE_NO && num <= CS_TEAMVOTE_NO + 1) {
ADDRGP4 $366
JUMPV
LABELV $365
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $371
ADDRLP4 0
INDIRI4
CNSTI4 19
GTI4 $371
line 362
;362:		cgs.teamVoteNo[num-CS_TEAMVOTE_NO] = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34240-72
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 363
;363:		cgs.teamVoteModified[num-CS_TEAMVOTE_NO] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+34248-72
ADDP4
CNSTI4 1
ASGNI4
line 364
;364:	} else if ( num >= CS_TEAMVOTE_STRING && num <= CS_TEAMVOTE_STRING + 1) {
ADDRGP4 $372
JUMPV
LABELV $371
ADDRLP4 0
INDIRI4
CNSTI4 14
LTI4 $377
ADDRLP4 0
INDIRI4
CNSTI4 15
GTI4 $377
line 365
;365:		Q_strncpyz( cgs.teamVoteString[num-CS_TEAMVOTE_STRING], str, sizeof( cgs.teamVoteString ) );
ADDRLP4 0
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+34256-14336
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 2048
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 366
;366:	} else if ( num == CS_INTERMISSION ) {
ADDRGP4 $378
JUMPV
LABELV $377
ADDRLP4 0
INDIRI4
CNSTI4 22
NEI4 $382
line 367
;367:		cg.intermissionStarted = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+24
ADDRLP4 36
INDIRI4
ASGNI4
line 368
;368:	} else if ( num >= CS_MODELS && num < CS_MODELS+MAX_MODELS ) {
ADDRGP4 $383
JUMPV
LABELV $382
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $385
ADDRLP4 0
INDIRI4
CNSTI4 288
GEI4 $385
line 369
;369:		cgs.gameModels[ num-CS_MODELS ] = trap_R_RegisterModel( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+36348-128
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 371
;370:// GHOUL2 Insert start
;371:	} else if ( num >= CS_CHARSKINS && num < CS_CHARSKINS+MAX_CHARSKINS ) {
ADDRGP4 $386
JUMPV
LABELV $385
ADDRLP4 0
INDIRI4
CNSTI4 576
LTI4 $389
ADDRLP4 0
INDIRI4
CNSTI4 640
GEI4 $389
line 372
;372:		cgs.skins[ num-CS_CHARSKINS ] = trap_R_RegisterSkin( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+38652-2304
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 374
;373:// Ghoul2 Insert end
;374:	} else if ( num >= CS_SOUNDS && num < CS_SOUNDS+MAX_SOUNDS ) {
ADDRGP4 $390
JUMPV
LABELV $389
ADDRLP4 0
INDIRI4
CNSTI4 288
LTI4 $393
ADDRLP4 0
INDIRI4
CNSTI4 544
GEI4 $393
line 375
;375:		if ( str[0] != '*' ) {	// player specific sounds don't register here
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $394
line 376
;376:			cgs.gameSounds[ num-CS_SOUNDS] = trap_S_RegisterSound( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+37372-1152
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 377
;377:		}
line 378
;378:	} else if ( num >= CS_EFFECTS && num < CS_SOUNDS+MAX_SOUNDS ) {
ADDRGP4 $394
JUMPV
LABELV $393
ADDRLP4 0
INDIRI4
CNSTI4 768
LTI4 $399
ADDRLP4 0
INDIRI4
CNSTI4 544
GEI4 $399
line 379
;379:		if ( str[0] != '*' ) {	// player specific sounds don't register here
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $400
line 380
;380:			cgs.gameEffects[ num-CS_EFFECTS] = trap_FX_RegisterEffect( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 trap_FX_RegisterEffect
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+38396-3072
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 381
;381:		}
line 382
;382:	} else if ( num >= CS_PLAYERS && num < CS_PLAYERS+MAX_CLIENTS ) {
ADDRGP4 $400
JUMPV
LABELV $399
ADDRLP4 0
INDIRI4
CNSTI4 544
LTI4 $405
ADDRLP4 0
INDIRI4
CNSTI4 576
GEI4 $405
line 383
;383:		CG_NewClientInfo( num - CS_PLAYERS, qtrue);
ADDRLP4 0
INDIRI4
CNSTI4 544
SUBI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_NewClientInfo
CALLV
pop
line 384
;384:		CG_BuildSpectatorString();
ADDRGP4 CG_BuildSpectatorString
CALLV
pop
line 385
;385:	} else if ( num == CS_FLAGSTATUS ) {
ADDRGP4 $406
JUMPV
LABELV $405
ADDRLP4 0
INDIRI4
CNSTI4 23
NEI4 $407
line 386
;386:		if( cgs.gametype == GT_CTF || cgs.gametype == GT_CTY ) {
ADDRGP4 cgs+32960
INDIRI4
CNSTI4 7
EQI4 $413
ADDRGP4 cgs+32960
INDIRI4
CNSTI4 8
NEI4 $408
LABELV $413
line 388
;387:			// format is rb where its red/blue, 0 is at base, 1 is taken, 2 is dropped
;388:			cgs.redflag = str[0] - '0';
ADDRGP4 cgs+36332
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 389
;389:			cgs.blueflag = str[1] - '0';
ADDRGP4 cgs+36336
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 390
;390:		}
line 391
;391:	}
ADDRGP4 $408
JUMPV
LABELV $407
line 392
;392:	else if ( num == CS_SHADERSTATE ) {
ADDRLP4 0
INDIRI4
CNSTI4 24
NEI4 $416
line 393
;393:		CG_ShaderStateChanged();
ADDRGP4 CG_ShaderStateChanged
CALLV
pop
line 394
;394:	}
ADDRGP4 $417
JUMPV
LABELV $416
line 395
;395:	else if ( num >= CS_LIGHT_STYLES && num < CS_LIGHT_STYLES + (MAX_LIGHT_STYLES * 3))
ADDRLP4 0
INDIRI4
CNSTI4 832
LTI4 $418
ADDRLP4 0
INDIRI4
CNSTI4 1024
GEI4 $418
line 396
;396:	{
line 397
;397:		CG_SetLightstyle(num - CS_LIGHT_STYLES);
ADDRLP4 0
INDIRI4
CNSTI4 832
SUBI4
ARGI4
ADDRGP4 CG_SetLightstyle
CALLV
pop
line 398
;398:	}
LABELV $418
LABELV $417
LABELV $408
LABELV $406
LABELV $400
LABELV $394
LABELV $390
LABELV $386
LABELV $383
LABELV $378
LABELV $372
LABELV $366
LABELV $360
LABELV $356
LABELV $352
LABELV $348
LABELV $344
LABELV $341
LABELV $330
LABELV $327
LABELV $324
LABELV $321
LABELV $318
LABELV $316
LABELV $314
LABELV $312
line 400
;399:		
;400:}
LABELV $310
endproc CG_ConfigStringModified 104 12
proc CG_AddToTeamChat 60 0
line 409
;401:
;402:
;403:/*
;404:=======================
;405:CG_AddToTeamChat
;406:
;407:=======================
;408:*/
;409:static void CG_AddToTeamChat( const char *str ) {
line 415
;410:	int len;
;411:	char *p, *ls;
;412:	int lastcolor;
;413:	int chatHeight;
;414:
;415:	if (cg_teamChatHeight.integer < TEAMCHAT_HEIGHT) {
ADDRGP4 cg_teamChatHeight+12
INDIRI4
CNSTI4 8
GEI4 $421
line 416
;416:		chatHeight = cg_teamChatHeight.integer;
ADDRLP4 12
ADDRGP4 cg_teamChatHeight+12
INDIRI4
ASGNI4
line 417
;417:	} else {
ADDRGP4 $422
JUMPV
LABELV $421
line 418
;418:		chatHeight = TEAMCHAT_HEIGHT;
ADDRLP4 12
CNSTI4 8
ASGNI4
line 419
;419:	}
LABELV $422
line 421
;420:
;421:	if (chatHeight <= 0 || cg_teamChatTime.integer <= 0) {
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $428
ADDRGP4 cg_teamChatTime+12
INDIRI4
ADDRLP4 20
INDIRI4
GTI4 $425
LABELV $428
line 423
;422:		// team chat disabled, dump into normal chat
;423:		cgs.teamChatPos = cgs.teamLastChatPos = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRGP4 cgs+70188
ADDRLP4 24
INDIRI4
ASGNI4
ADDRGP4 cgs+70184
ADDRLP4 24
INDIRI4
ASGNI4
line 424
;424:		return;
ADDRGP4 $420
JUMPV
LABELV $425
line 427
;425:	}
;426:
;427:	len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 429
;428:
;429:	p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
CNSTI4 241
ADDRGP4 cgs+70184
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
MULI4
ADDRGP4 cgs+68224
ADDP4
ASGNP4
line 430
;430:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 432
;431:
;432:	lastcolor = '7';
ADDRLP4 16
CNSTI4 55
ASGNI4
line 434
;433:
;434:	ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRGP4 $434
JUMPV
LABELV $433
line 435
;435:	while (*str) {
line 436
;436:		if (len > TEAMCHAT_WIDTH - 1) {
ADDRLP4 4
INDIRI4
CNSTI4 79
LEI4 $436
line 437
;437:			if (ls) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $438
line 438
;438:				str -= (p - ls);
ADDRFP4 0
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 439
;439:				str++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 440
;440:				p -= (p - ls);
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 441
;441:			}
LABELV $438
line 442
;442:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 444
;443:
;444:			cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+70184
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+70152
ADDP4
ADDRGP4 cg+64
INDIRI4
ASGNI4
line 446
;445:
;446:			cgs.teamChatPos++;
ADDRLP4 24
ADDRGP4 cgs+70184
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 447
;447:			p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
CNSTI4 241
ADDRGP4 cgs+70184
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
MULI4
ADDRGP4 cgs+68224
ADDP4
ASGNP4
line 448
;448:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 449
;449:			*p++ = Q_COLOR_ESCAPE;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI1 94
ASGNI1
line 450
;450:			*p++ = lastcolor;
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 16
INDIRI4
CVII1 4
ASGNI1
line 451
;451:			len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 452
;452:			ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 453
;453:		}
LABELV $436
line 455
;454:
;455:		if ( Q_IsColorString( str ) ) {
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $446
ADDRLP4 28
CNSTI4 94
ASGNI4
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 28
INDIRI4
NEI4 $446
ADDRLP4 32
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $446
ADDRLP4 32
INDIRI4
ADDRLP4 28
INDIRI4
EQI4 $446
line 456
;456:			*p++ = *str++;
ADDRLP4 36
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI1
ASGNI1
line 457
;457:			lastcolor = *str;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 458
;458:			*p++ = *str++;
ADDRLP4 48
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 56
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ASGNP4
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 52
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI1
ASGNI1
line 459
;459:			continue;
ADDRGP4 $434
JUMPV
LABELV $446
line 461
;460:		}
;461:		if (*str == ' ') {
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
NEI4 $448
line 462
;462:			ls = p;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
line 463
;463:		}
LABELV $448
line 464
;464:		*p++ = *str++;
ADDRLP4 36
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI1
ASGNI1
line 465
;465:		len++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 466
;466:	}
LABELV $434
line 435
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $433
line 467
;467:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 469
;468:
;469:	cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+70184
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+70152
ADDP4
ADDRGP4 cg+64
INDIRI4
ASGNI4
line 470
;470:	cgs.teamChatPos++;
ADDRLP4 24
ADDRGP4 cgs+70184
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 472
;471:
;472:	if (cgs.teamChatPos - cgs.teamLastChatPos > chatHeight)
ADDRGP4 cgs+70184
INDIRI4
ADDRGP4 cgs+70188
INDIRI4
SUBI4
ADDRLP4 12
INDIRI4
LEI4 $454
line 473
;473:		cgs.teamLastChatPos = cgs.teamChatPos - chatHeight;
ADDRGP4 cgs+70188
ADDRGP4 cgs+70184
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
LABELV $454
line 474
;474:}
LABELV $420
endproc CG_AddToTeamChat 60 0
export CG_KillCEntityInstances
proc CG_KillCEntityInstances 12 4
line 479
;475:
;476:void CG_LoadClientInfo( clientInfo_t *ci );
;477:
;478:void CG_KillCEntityInstances()
;479:{
line 480
;480:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $462
JUMPV
LABELV $461
line 483
;481:
;482:	while (i < MAX_GENTITIES)
;483:	{
line 484
;484:		if (i >= MAX_CLIENTS)
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $464
line 485
;485:		{ //do not clear G2 instances on client ents, they are constant
line 486
;486:			if (cg_entities[i].ghoul2 && trap_G2_HaveWeGhoul2Models(cg_entities[i].ghoul2))
ADDRLP4 4
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 4
INDIRI4
ADDRGP4 cg_entities+952
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $466
ADDRLP4 4
INDIRI4
ADDRGP4 cg_entities+952
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 trap_G2_HaveWeGhoul2Models
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $466
line 487
;487:			{
line 488
;488:				trap_G2API_CleanGhoul2Models(&(cg_entities[i].ghoul2));
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+952
ADDP4
ARGP4
ADDRGP4 trap_G2API_CleanGhoul2Models
CALLV
pop
line 489
;489:			}
LABELV $466
line 490
;490:		}
LABELV $464
line 511
;491:		/*
;492:		else
;493:		{ //we must do this, because otherwise after a map_restart it seems to return bad angles in matrices produced by GetBoltMatrix
;494:			if (cgs.clientinfo[i].ghoul2Model || cg_entities[i].ghoul2)
;495:			{
;496:				CG_LoadClientInfo(&cgs.clientinfo[i]);
;497:
;498:				if (cg_entities[i].ghoul2 != cgs.clientinfo[i].ghoul2Model)
;499:				{
;500:					if (cg_entities[i].ghoul2 && trap_G2_HaveWeGhoul2Models(cg_entities[i].ghoul2))
;501:					{
;502:						trap_G2API_CleanGhoul2Models(&(cg_entities[i].ghoul2));
;503:					}
;504:
;505:					trap_G2API_DuplicateGhoul2Instance(cgs.clientinfo[i].ghoul2Model, &cg_entities[i].ghoul2);
;506:				}
;507:			}
;508:		}
;509:		*/
;510:
;511:		cg_entities[i].isATST = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1028
ADDP4
CNSTI4 0
ASGNI4
line 512
;512:		cg_entities[i].atstFootClang = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1032
ADDP4
CNSTI4 0
ASGNI4
line 513
;513:		cg_entities[i].atstSwinging = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1036
ADDP4
CNSTI4 0
ASGNI4
line 514
;514:		cg_entities[i].bolt1 = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+984
ADDP4
CNSTI4 0
ASGNI4
line 515
;515:		cg_entities[i].bolt2 = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+988
ADDP4
CNSTI4 0
ASGNI4
line 516
;516:		cg_entities[i].bolt3 = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+992
ADDP4
CNSTI4 0
ASGNI4
line 517
;517:		cg_entities[i].bolt4 = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+996
ADDP4
CNSTI4 0
ASGNI4
line 519
;518:
;519:		cg_entities[i].saberLength = SABER_LENGTH_MAX;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1000
ADDP4
CNSTF4 1109393408
ASGNF4
line 520
;520:		cg_entities[i].saberExtendTime = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1004
ADDP4
CNSTI4 0
ASGNI4
line 522
;521:
;522:		cg_entities[i].boltInfo = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+980
ADDP4
CNSTI4 0
ASGNI4
line 524
;523:
;524:		cg_entities[i].frame_minus1_refreshed = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1464
ADDP4
CNSTI4 0
ASGNI4
line 525
;525:		cg_entities[i].frame_minus2_refreshed = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1468
ADDP4
CNSTI4 0
ASGNI4
line 526
;526:		cg_entities[i].dustTrailTime = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+616
ADDP4
CNSTI4 0
ASGNI4
line 527
;527:		cg_entities[i].ghoul2weapon = NULL;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+960
ADDP4
CNSTP4 0
ASGNP4
line 528
;528:		cg_entities[i].torsoBolt = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1012
ADDP4
CNSTI4 0
ASGNI4
line 529
;529:		cg_entities[i].trailTime = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+612
ADDP4
CNSTI4 0
ASGNI4
line 530
;530:		cg_entities[i].frame_hold_time = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1684
ADDP4
CNSTI4 0
ASGNI4
line 531
;531:		cg_entities[i].frame_hold_refreshed = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1688
ADDP4
CNSTI4 0
ASGNI4
line 532
;532:		cg_entities[i].trickAlpha = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1904
ADDP4
CNSTI4 0
ASGNI4
line 533
;533:		cg_entities[i].trickAlphaTime = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1908
ADDP4
CNSTI4 0
ASGNI4
line 534
;534:		VectorClear(cg_entities[i].turAngles);
ADDRLP4 4
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 4
INDIRI4
ADDRGP4 cg_entities+1016+8
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRI4
ADDRGP4 cg_entities+1016+4
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRI4
ADDRGP4 cg_entities+1016
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 535
;535:		cg_entities[i].weapon = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+956
ADDP4
CNSTI4 0
ASGNI4
line 536
;536:		cg_entities[i].teamPowerEffectTime = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1912
ADDP4
CNSTI4 0
ASGNI4
line 537
;537:		cg_entities[i].teamPowerType = 0;
CNSTI4 1920
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+1916
ADDP4
CNSTI4 0
ASGNI4
line 539
;538:
;539:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 540
;540:	}
LABELV $462
line 482
ADDRLP4 0
INDIRI4
CNSTI4 1024
LTI4 $461
line 541
;541:}
LABELV $460
endproc CG_KillCEntityInstances 12 4
proc CG_MapRestart 12 12
line 554
;542:
;543:/*
;544:===============
;545:CG_MapRestart
;546:
;547:The server has issued a map_restart, so the next snapshot
;548:is completely new and should not be interpolated to.
;549:
;550:A tournement restart will clear everything, but doesn't
;551:require a reload of all the media
;552:===============
;553:*/
;554:static void CG_MapRestart( void ) {
line 555
;555:	if ( cg_showmiss.integer ) {
ADDRGP4 cg_showmiss+12
INDIRI4
CNSTI4 0
EQI4 $500
line 556
;556:		CG_Printf( "CG_MapRestart\n" );
ADDRGP4 $503
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 557
;557:	}
LABELV $500
line 559
;558:
;559:	CG_InitLocalEntities();
ADDRGP4 CG_InitLocalEntities
CALLV
pop
line 560
;560:	CG_InitMarkPolys();
ADDRGP4 CG_InitMarkPolys
CALLV
pop
line 561
;561:	CG_ClearParticles ();
ADDRGP4 CG_ClearParticles
CALLV
pop
line 562
;562:	CG_KillCEntityInstances();
ADDRGP4 CG_KillCEntityInstances
CALLV
pop
line 565
;563:
;564:	// make sure the "3 frags left" warnings play again
;565:	cg.fraglimitWarnings = 0;
ADDRGP4 cg+80
CNSTI4 0
ASGNI4
line 567
;566:
;567:	cg.timelimitWarnings = 0;
ADDRGP4 cg+76
CNSTI4 0
ASGNI4
line 569
;568:
;569:	cg.intermissionStarted = qfalse;
ADDRGP4 cg+24
CNSTI4 0
ASGNI4
line 571
;570:
;571:	cgs.voteTime = 0;
ADDRGP4 cgs+33184
CNSTI4 0
ASGNI4
line 573
;572:
;573:	cg.mapRestart = qtrue;
ADDRGP4 cg+84
CNSTI4 1
ASGNI4
line 575
;574:
;575:	CG_StartMusic(qtrue);
CNSTI4 1
ARGI4
ADDRGP4 CG_StartMusic
CALLV
pop
line 577
;576:
;577:	trap_S_ClearLoopingSounds(qtrue);
CNSTI4 1
ARGI4
ADDRGP4 trap_S_ClearLoopingSounds
CALLV
pop
line 582
;578:
;579:	// we really should clear more parts of cg here and stop sounds
;580:
;581:	// play the "fight" sound if this is a restart without warmup
;582:	if ( cg.warmup == 0 /* && cgs.gametype == GT_TOURNAMENT */) {
ADDRGP4 cg+13340
INDIRI4
CNSTI4 0
NEI4 $509
line 583
;583:		trap_S_StartLocalSound( cgs.media.countFightSound, CHAN_ANNOUNCER );
ADDRGP4 cgs+70280+864
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 584
;584:		CG_CenterPrint( CG_GetStripEdString("SVINGAME", "BEGIN_DUEL"), 120, GIANTCHAR_WIDTH*2 );
ADDRGP4 $514
ARGP4
ADDRGP4 $515
ARGP4
ADDRLP4 0
ADDRGP4 CG_GetStripEdString
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 120
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 585
;585:	}
LABELV $509
line 586
;586:	if (cg_singlePlayerActive.integer) {
ADDRGP4 cg_singlePlayerActive+12
INDIRI4
CNSTI4 0
EQI4 $516
line 587
;587:		trap_Cvar_Set("ui_matchStartTime", va("%i", cg.time));
ADDRGP4 $219
ARGP4
ADDRGP4 cg+64
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $519
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 588
;588:		if (cg_recordSPDemo.integer && cg_recordSPDemoName.string && *cg_recordSPDemoName.string) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 cg_recordSPDemo+12
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $521
ADDRGP4 cg_recordSPDemoName+16
CVPU4 4
CNSTU4 0
EQU4 $521
ADDRGP4 cg_recordSPDemoName+16
INDIRI1
CVII4 1
ADDRLP4 4
INDIRI4
EQI4 $521
line 589
;589:			trap_SendConsoleCommand(va("set g_synchronousclients 1 ; record %s \n", cg_recordSPDemoName.string));
ADDRGP4 $526
ARGP4
ADDRGP4 cg_recordSPDemoName+16
ARGP4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 590
;590:		}
LABELV $521
line 591
;591:	}
LABELV $516
line 592
;592:	trap_Cvar_Set("cg_thirdPerson", "0");
ADDRGP4 $528
ARGP4
ADDRGP4 $529
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 593
;593:}
LABELV $499
endproc CG_MapRestart 12 12
export CG_ParseVoiceChats
proc CG_ParseVoiceChats 16504 16
line 632
;594:
;595:#define MAX_VOICEFILESIZE	16384
;596:#define MAX_VOICEFILES		8
;597:#define MAX_VOICECHATS		64
;598:#define MAX_VOICESOUNDS		64
;599:#define MAX_CHATSIZE		64
;600:#define MAX_HEADMODELS		64
;601:
;602:typedef struct voiceChat_s
;603:{
;604:	char id[64];
;605:	int numSounds;
;606:	sfxHandle_t sounds[MAX_VOICESOUNDS];
;607:	char chats[MAX_VOICESOUNDS][MAX_CHATSIZE];
;608:} voiceChat_t;
;609:
;610:typedef struct voiceChatList_s
;611:{
;612:	char name[64];
;613:	int gender;
;614:	int numVoiceChats;
;615:	voiceChat_t voiceChats[MAX_VOICECHATS];
;616:} voiceChatList_t;
;617:
;618:typedef struct headModelVoiceChat_s
;619:{
;620:	char headmodel[64];
;621:	int voiceChatNum;
;622:} headModelVoiceChat_t;
;623:
;624:voiceChatList_t voiceChatLists[MAX_VOICEFILES];
;625://headModelVoiceChat_t headModelVoiceChat[MAX_HEADMODELS];
;626:
;627:/*
;628:=================
;629:CG_ParseVoiceChats
;630:=================
;631:*/
;632:int CG_ParseVoiceChats( const char *filename, voiceChatList_t *voiceChatList, int maxVoiceChats ) {
line 641
;633:	int	len, i;
;634:	fileHandle_t f;
;635:	char buf[MAX_VOICEFILESIZE];
;636:	char **p, *ptr;
;637:	char *token;
;638:	voiceChat_t *voiceChats;
;639:	qboolean compress;
;640:
;641:	compress = qtrue;
ADDRLP4 16412
CNSTI4 1
ASGNI4
line 642
;642:	if (cg_buildScript.integer) {
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $531
line 643
;643:		compress = qfalse;
ADDRLP4 16412
CNSTI4 0
ASGNI4
line 644
;644:	}
LABELV $531
line 646
;645:
;646:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16416
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 16416
INDIRI4
ASGNI4
line 647
;647:	if ( !f ) {
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $534
line 648
;648:		trap_Print( va( S_COLOR_RED "voice chat file not found: %s\n", filename ) );
ADDRGP4 $536
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16420
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16420
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 649
;649:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $530
JUMPV
LABELV $534
line 651
;650:	}
;651:	if ( len >= MAX_VOICEFILESIZE ) {
ADDRLP4 16
INDIRI4
CNSTI4 16384
LTI4 $537
line 652
;652:		trap_Print( va( S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i", filename, len, MAX_VOICEFILESIZE ) );
ADDRGP4 $539
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
CNSTI4 16384
ARGI4
ADDRLP4 16420
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16420
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 653
;653:		trap_FS_FCloseFile( f );
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 654
;654:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $530
JUMPV
LABELV $537
line 657
;655:	}
;656:
;657:	trap_FS_Read( buf, len, f );
ADDRLP4 24
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 658
;658:	buf[len] = 0;
ADDRLP4 16
INDIRI4
ADDRLP4 24
ADDP4
CNSTI1 0
ASGNI1
line 659
;659:	trap_FS_FCloseFile( f );
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 661
;660:
;661:	ptr = buf;
ADDRLP4 16408
ADDRLP4 24
ASGNP4
line 662
;662:	p = &ptr;
ADDRLP4 8
ADDRLP4 16408
ASGNP4
line 664
;663:
;664:	Com_sprintf(voiceChatList->name, sizeof(voiceChatList->name), "%s", filename);
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $540
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 665
;665:	voiceChats = voiceChatList->voiceChats;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
line 666
;666:	for ( i = 0; i < maxVoiceChats; i++ ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $544
JUMPV
LABELV $541
line 667
;667:		voiceChats[i].id[0] = 0;
CNSTI4 4420
ADDRLP4 12
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 668
;668:	}
LABELV $542
line 666
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $544
ADDRLP4 12
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $541
line 669
;669:	token = COM_ParseExt((const char **)p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16420
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16420
INDIRP4
ASGNP4
line 670
;670:	if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $547
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $545
LABELV $547
line 671
;671:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $530
JUMPV
LABELV $545
line 673
;672:	}
;673:	if (!Q_stricmp(token, "female")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $550
ARGP4
ADDRLP4 16428
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16428
INDIRI4
CNSTI4 0
NEI4 $548
line 674
;674:		voiceChatList->gender = GENDER_FEMALE;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 1
ASGNI4
line 675
;675:	}
ADDRGP4 $549
JUMPV
LABELV $548
line 676
;676:	else if (!Q_stricmp(token, "male")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $553
ARGP4
ADDRLP4 16432
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16432
INDIRI4
CNSTI4 0
NEI4 $551
line 677
;677:		voiceChatList->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 678
;678:	}
ADDRGP4 $552
JUMPV
LABELV $551
line 679
;679:	else if (!Q_stricmp(token, "neuter")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $556
ARGP4
ADDRLP4 16436
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16436
INDIRI4
CNSTI4 0
NEI4 $554
line 680
;680:		voiceChatList->gender = GENDER_NEUTER;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 2
ASGNI4
line 681
;681:	}
ADDRGP4 $555
JUMPV
LABELV $554
line 682
;682:	else {
line 683
;683:		trap_Print( va( S_COLOR_RED "expected gender not found in voice chat file: %s\n", filename ) );
ADDRGP4 $557
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16440
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16440
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 684
;684:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $530
JUMPV
LABELV $555
LABELV $552
LABELV $549
line 687
;685:	}
;686:
;687:	voiceChatList->numVoiceChats = 0;
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $559
JUMPV
LABELV $558
line 688
;688:	while ( 1 ) {
line 689
;689:		token = COM_ParseExt((const char **)p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16440
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16440
INDIRP4
ASGNP4
line 690
;690:		if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $563
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $561
LABELV $563
line 691
;691:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $530
JUMPV
LABELV $561
line 693
;692:		}
;693:		Com_sprintf(voiceChats[voiceChatList->numVoiceChats].id, sizeof( voiceChats[voiceChatList->numVoiceChats].id ), "%s", token);
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $540
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 694
;694:		token = COM_ParseExt((const char **)p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16448
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16448
INDIRP4
ASGNP4
line 695
;695:		if (Q_stricmp(token, "{")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $566
ARGP4
ADDRLP4 16452
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16452
INDIRI4
CNSTI4 0
EQI4 $564
line 696
;696:			trap_Print( va( S_COLOR_RED "expected { found %s in voice chat file: %s\n", token, filename ) );
ADDRGP4 $567
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16456
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16456
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 697
;697:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $530
JUMPV
LABELV $564
line 699
;698:		}
;699:		voiceChats[voiceChatList->numVoiceChats].numSounds = 0;
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $569
JUMPV
LABELV $568
line 700
;700:		while(1) {
line 701
;701:			token = COM_ParseExt((const char **)p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16456
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16456
INDIRP4
ASGNP4
line 702
;702:			if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $573
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $571
LABELV $573
line 703
;703:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $530
JUMPV
LABELV $571
line 705
;704:			}
;705:			if (!Q_stricmp(token, "}"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 16464
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16464
INDIRI4
CNSTI4 0
NEI4 $574
line 706
;706:				break;
ADDRGP4 $570
JUMPV
LABELV $574
line 707
;707:			voiceChats[voiceChatList->numVoiceChats].sounds[voiceChats[voiceChatList->numVoiceChats].numSounds] = 
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16468
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 16472
CNSTI4 68
ASGNI4
ADDRLP4 16476
CNSTI4 4420
ADDRFP4 4
INDIRP4
ADDRLP4 16472
INDIRI4
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 16476
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16476
INDIRP4
ADDRLP4 16472
INDIRI4
ADDP4
ADDP4
ADDRLP4 16468
INDIRI4
ASGNI4
line 709
;708:          trap_S_RegisterSound( token );
;709:			token = COM_ParseExt((const char **)p, qtrue);
ADDRLP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16480
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16480
INDIRP4
ASGNP4
line 710
;710:			if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $579
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $577
LABELV $579
line 711
;711:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $530
JUMPV
LABELV $577
line 713
;712:			}
;713:			Com_sprintf(voiceChats[voiceChatList->numVoiceChats].chats[
ADDRLP4 16488
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 16492
CNSTI4 64
ASGNI4
ADDRLP4 16488
INDIRP4
ADDRLP4 16492
INDIRI4
ADDP4
INDIRI4
CNSTI4 6
LSHI4
ADDRLP4 16488
INDIRP4
CNSTI4 324
ADDP4
ADDP4
ARGP4
ADDRLP4 16492
INDIRI4
ARGI4
ADDRGP4 $540
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 715
;714:							voiceChats[voiceChatList->numVoiceChats].numSounds], MAX_CHATSIZE, "%s", token);
;715:			voiceChats[voiceChatList->numVoiceChats].numSounds++;
ADDRLP4 16496
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI4 64
ADDP4
ASGNP4
ADDRLP4 16496
INDIRP4
ADDRLP4 16496
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 716
;716:			if (voiceChats[voiceChatList->numVoiceChats].numSounds >= MAX_VOICESOUNDS)
ADDRLP4 16500
CNSTI4 64
ASGNI4
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ADDRLP4 16500
INDIRI4
ADDP4
INDIRI4
ADDRLP4 16500
INDIRI4
LTI4 $580
line 717
;717:				break;
ADDRGP4 $570
JUMPV
LABELV $580
line 718
;718:		}
LABELV $569
line 700
ADDRGP4 $568
JUMPV
LABELV $570
line 719
;719:		voiceChatList->numVoiceChats++;
ADDRLP4 16456
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 16456
INDIRP4
ADDRLP4 16456
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 720
;720:		if (voiceChatList->numVoiceChats >= maxVoiceChats)
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $582
line 721
;721:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $530
JUMPV
LABELV $582
line 722
;722:	}
LABELV $559
line 688
ADDRGP4 $558
JUMPV
line 723
;723:	return qtrue;
CNSTI4 1
RETI4
LABELV $530
endproc CG_ParseVoiceChats 16504 16
export CG_LoadVoiceChats
proc CG_LoadVoiceChats 12 12
line 731
;724:}
;725:
;726:/*
;727:=================
;728:CG_LoadVoiceChats
;729:=================
;730:*/
;731:void CG_LoadVoiceChats( void ) {
line 734
;732:	int size;
;733:
;734:	size = trap_MemoryRemaining();
ADDRLP4 4
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 735
;735:	CG_ParseVoiceChats( "scripts/female1.voice", &voiceChatLists[0], MAX_VOICECHATS );
ADDRGP4 $585
ARGP4
ADDRGP4 voiceChatLists
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 736
;736:	CG_ParseVoiceChats( "scripts/female2.voice", &voiceChatLists[1], MAX_VOICECHATS );
ADDRGP4 $586
ARGP4
ADDRGP4 voiceChatLists+282952
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 737
;737:	CG_ParseVoiceChats( "scripts/female3.voice", &voiceChatLists[2], MAX_VOICECHATS );
ADDRGP4 $588
ARGP4
ADDRGP4 voiceChatLists+565904
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 738
;738:	CG_ParseVoiceChats( "scripts/male1.voice", &voiceChatLists[3], MAX_VOICECHATS );
ADDRGP4 $590
ARGP4
ADDRGP4 voiceChatLists+848856
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 739
;739:	CG_ParseVoiceChats( "scripts/male2.voice", &voiceChatLists[4], MAX_VOICECHATS );
ADDRGP4 $592
ARGP4
ADDRGP4 voiceChatLists+1131808
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 740
;740:	CG_ParseVoiceChats( "scripts/male3.voice", &voiceChatLists[5], MAX_VOICECHATS );
ADDRGP4 $594
ARGP4
ADDRGP4 voiceChatLists+1414760
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 741
;741:	CG_ParseVoiceChats( "scripts/male4.voice", &voiceChatLists[6], MAX_VOICECHATS );
ADDRGP4 $596
ARGP4
ADDRGP4 voiceChatLists+1697712
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 742
;742:	CG_ParseVoiceChats( "scripts/male5.voice", &voiceChatLists[7], MAX_VOICECHATS );
ADDRGP4 $598
ARGP4
ADDRGP4 voiceChatLists+1980664
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 743
;743:	CG_Printf("voice chat memory size = %d\n", size - trap_MemoryRemaining());
ADDRLP4 8
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRGP4 $600
ARGP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 744
;744:}
LABELV $584
endproc CG_LoadVoiceChats 12 12
export CG_HeadModelVoiceChats
proc CG_HeadModelVoiceChats 16424 16
line 751
;745:
;746:/*
;747:=================
;748:CG_HeadModelVoiceChats
;749:=================
;750:*/
;751:int CG_HeadModelVoiceChats( char *filename ) {
line 758
;752:	int	len, i;
;753:	fileHandle_t f;
;754:	char buf[MAX_VOICEFILESIZE];
;755:	char **p, *ptr;
;756:	char *token;
;757:
;758:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16408
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 16408
INDIRI4
ASGNI4
line 759
;759:	if ( !f ) {
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $602
line 761
;760:		//trap_Print( va( "voice chat file not found: %s\n", filename ) );
;761:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $601
JUMPV
LABELV $602
line 763
;762:	}
;763:	if ( len >= MAX_VOICEFILESIZE ) {
ADDRLP4 8
INDIRI4
CNSTI4 16384
LTI4 $604
line 764
;764:		trap_Print( va( S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i", filename, len, MAX_VOICEFILESIZE ) );
ADDRGP4 $539
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
CNSTI4 16384
ARGI4
ADDRLP4 16412
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16412
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 765
;765:		trap_FS_FCloseFile( f );
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 766
;766:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $601
JUMPV
LABELV $604
line 769
;767:	}
;768:
;769:	trap_FS_Read( buf, len, f );
ADDRLP4 16
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 770
;770:	buf[len] = 0;
ADDRLP4 8
INDIRI4
ADDRLP4 16
ADDP4
CNSTI1 0
ASGNI1
line 771
;771:	trap_FS_FCloseFile( f );
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 773
;772:
;773:	ptr = buf;
ADDRLP4 16404
ADDRLP4 16
ASGNP4
line 774
;774:	p = &ptr;
ADDRLP4 16400
ADDRLP4 16404
ASGNP4
line 776
;775:
;776:	token = COM_ParseExt((const char **)p, qtrue);
ADDRLP4 16400
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16412
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16412
INDIRP4
ASGNP4
line 777
;777:	if (!token || token[0] == 0) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $608
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $606
LABELV $608
line 778
;778:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $601
JUMPV
LABELV $606
line 781
;779:	}
;780:
;781:	for ( i = 0; i < MAX_VOICEFILES; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $609
line 782
;782:		if ( !Q_stricmp(token, voiceChatLists[i].name) ) {
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
ARGP4
ADDRLP4 16420
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16420
INDIRI4
CNSTI4 0
NEI4 $613
line 783
;783:			return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $601
JUMPV
LABELV $613
line 785
;784:		}
;785:	}
LABELV $610
line 781
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 8
LTI4 $609
line 789
;786:
;787:	//FIXME: maybe try to load the .voice file which name is stored in token?
;788:
;789:	return -1;
CNSTI4 -1
RETI4
LABELV $601
endproc CG_HeadModelVoiceChats 16424 16
export CG_GetVoiceChat
proc CG_GetVoiceChat 16 8
line 798
;790:}
;791:
;792:
;793:/*
;794:=================
;795:CG_GetVoiceChat
;796:=================
;797:*/
;798:int CG_GetVoiceChat( voiceChatList_t *voiceChatList, const char *id, sfxHandle_t *snd, char **chat) {
line 801
;799:	int i, rnd;
;800:
;801:	for ( i = 0; i < voiceChatList->numVoiceChats; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $619
JUMPV
LABELV $616
line 802
;802:		if ( !Q_stricmp( id, voiceChatList->voiceChats[i].id ) ) {
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $620
line 803
;803:			rnd = random() * voiceChatList->voiceChats[i].numSounds;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 64
ADDP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 804
;804:			*snd = voiceChatList->voiceChats[i].sounds[rnd];
ADDRFP4 8
INDIRP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 68
ADDP4
ADDP4
INDIRI4
ASGNI4
line 805
;805:			*chat = voiceChatList->voiceChats[i].chats[rnd];
ADDRFP4 12
INDIRP4
ADDRLP4 4
INDIRI4
CNSTI4 6
LSHI4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 324
ADDP4
ADDP4
ASGNP4
line 806
;806:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $615
JUMPV
LABELV $620
line 808
;807:		}
;808:	}
LABELV $617
line 801
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $619
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
LTI4 $616
line 809
;809:	return qfalse;
CNSTI4 0
RETI4
LABELV $615
endproc CG_GetVoiceChat 16 8
export CG_VoiceChatListForClient
proc CG_VoiceChatListForClient 8 0
line 817
;810:}
;811:
;812:/*
;813:=================
;814:CG_VoiceChatListForClient
;815:=================
;816:*/
;817:voiceChatList_t *CG_VoiceChatListForClient( int clientNum ) {
line 820
;818:	clientInfo_t *ci;
;819:
;820:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 4
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $625
ADDRLP4 4
INDIRI4
CNSTI4 32
LTI4 $623
LABELV $625
line 821
;821:		clientNum = 0;
ADDRFP4 0
CNSTI4 0
ASGNI4
line 822
;822:	}
LABELV $623
line 823
;823:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 0
CNSTI4 788
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+43008
ADDP4
ASGNP4
line 903
;824:/*
;825:	int voiceChatNum, i, j, k, gender;
;826:	char filename[MAX_QPATH], headModelName[MAX_QPATH];
;827:
;828:	for ( k = 0; k < 2; k++ ) {
;829:		if ( k == 0 ) {
;830:			if (ci->headModelName[0] == '*') {
;831:				Com_sprintf( headModelName, sizeof(headModelName), "%s/%s", ci->headModelName+1, ci->headSkinName );
;832:			}
;833:			else {
;834:				Com_sprintf( headModelName, sizeof(headModelName), "%s/%s", ci->headModelName, ci->headSkinName );
;835:			}
;836:		}
;837:		else {
;838:			if (ci->headModelName[0] == '*') {
;839:				Com_sprintf( headModelName, sizeof(headModelName), "%s", ci->headModelName+1 );
;840:			}
;841:			else {
;842:				Com_sprintf( headModelName, sizeof(headModelName), "%s", ci->headModelName );
;843:			}
;844:		}
;845:		// find the voice file for the head model the client uses
;846:		for ( i = 0; i < MAX_HEADMODELS; i++ ) {
;847:			if (!Q_stricmp(headModelVoiceChat[i].headmodel, headModelName)) {
;848:				break;
;849:			}
;850:		}
;851:		if (i < MAX_HEADMODELS) {
;852:			return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
;853:		}
;854:		// find a <headmodelname>.vc file
;855:		for ( i = 0; i < MAX_HEADMODELS; i++ ) {
;856:			if (!strlen(headModelVoiceChat[i].headmodel)) {
;857:				Com_sprintf(filename, sizeof(filename), "scripts/%s.vc", headModelName);
;858:				voiceChatNum = CG_HeadModelVoiceChats(filename);
;859:				if (voiceChatNum == -1)
;860:					break;
;861:				Com_sprintf(headModelVoiceChat[i].headmodel, sizeof ( headModelVoiceChat[i].headmodel ),
;862:							"%s", headModelName);
;863:				headModelVoiceChat[i].voiceChatNum = voiceChatNum;
;864:				return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
;865:			}
;866:		}
;867:	}
;868:	gender = ci->gender;
;869:	for (k = 0; k < 2; k++) {
;870:		// just pick the first with the right gender
;871:		for ( i = 0; i < MAX_VOICEFILES; i++ ) {
;872:			if (strlen(voiceChatLists[i].name)) {
;873:				if (voiceChatLists[i].gender == gender) {
;874:					// store this head model with voice chat for future reference
;875:					for ( j = 0; j < MAX_HEADMODELS; j++ ) {
;876:						if (!strlen(headModelVoiceChat[j].headmodel)) {
;877:							Com_sprintf(headModelVoiceChat[j].headmodel, sizeof ( headModelVoiceChat[j].headmodel ),
;878:									"%s", headModelName);
;879:							headModelVoiceChat[j].voiceChatNum = i;
;880:							break;
;881:						}
;882:					}
;883:					return &voiceChatLists[i];
;884:				}
;885:			}
;886:		}
;887:		// fall back to male gender because we don't have neuter in the mission pack
;888:		if (gender == GENDER_MALE)
;889:			break;
;890:		gender = GENDER_MALE;
;891:	}
;892:	// store this head model with voice chat for future reference
;893:	for ( j = 0; j < MAX_HEADMODELS; j++ ) {
;894:		if (!strlen(headModelVoiceChat[j].headmodel)) {
;895:			Com_sprintf(headModelVoiceChat[j].headmodel, sizeof ( headModelVoiceChat[j].headmodel ),
;896:					"%s", headModelName);
;897:			headModelVoiceChat[j].voiceChatNum = 0;
;898:			break;
;899:		}
;900:	}
;901:	*/
;902:	// just return the first voice chat list
;903:	return &voiceChatLists[0];
ADDRGP4 voiceChatLists
RETP4
LABELV $622
endproc CG_VoiceChatListForClient 8 0
export CG_PlayVoiceChat
proc CG_PlayVoiceChat 8 12
line 924
;904:}
;905:
;906:#define MAX_VOICECHATBUFFER		32
;907:
;908:typedef struct bufferedVoiceChat_s
;909:{
;910:	int clientNum;
;911:	sfxHandle_t snd;
;912:	int voiceOnly;
;913:	char cmd[MAX_SAY_TEXT];
;914:	char message[MAX_SAY_TEXT];
;915:} bufferedVoiceChat_t;
;916:
;917:bufferedVoiceChat_t voiceChatBuffer[MAX_VOICECHATBUFFER];
;918:
;919:/*
;920:=================
;921:CG_PlayVoiceChat
;922:=================
;923:*/
;924:void CG_PlayVoiceChat( bufferedVoiceChat_t *vchat ) {
line 926
;925:	// if we are going into the intermission, don't start any voices
;926:	if ( cg.intermissionStarted ) {
ADDRGP4 cg+24
INDIRI4
CNSTI4 0
EQI4 $628
line 927
;927:		return;
ADDRGP4 $627
JUMPV
LABELV $628
line 930
;928:	}
;929:
;930:	if ( !cg_noVoiceChats.integer ) {
ADDRGP4 cg_noVoiceChats+12
INDIRI4
CNSTI4 0
NEI4 $631
line 931
;931:		trap_S_StartLocalSound( vchat->snd, CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 932
;932:		if (vchat->clientNum != cg.snap->ps.clientNum) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
EQI4 $634
line 933
;933:			int orderTask = CG_ValidOrder(vchat->cmd);
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 CG_ValidOrder
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 934
;934:			if (orderTask > 0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $637
line 935
;935:				cgs.acceptOrderTime = cg.time + 5000;
ADDRGP4 cgs+70236
ADDRGP4 cg+64
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 936
;936:				Q_strncpyz(cgs.acceptVoice, vchat->cmd, sizeof(cgs.acceptVoice));
ADDRGP4 cgs+70248
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 937
;937:				cgs.acceptTask = orderTask;
ADDRGP4 cgs+70240
ADDRLP4 0
INDIRI4
ASGNI4
line 938
;938:				cgs.acceptLeader = vchat->clientNum;
ADDRGP4 cgs+70244
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 939
;939:			}
LABELV $637
line 941
;940:			// see if this was an order
;941:			CG_ShowResponseHead();
ADDRGP4 CG_ShowResponseHead
CALLV
pop
line 942
;942:		}
LABELV $634
line 943
;943:	}
LABELV $631
line 944
;944:	if (!vchat->voiceOnly && !cg_noVoiceText.integer) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $645
ADDRGP4 cg_noVoiceText+12
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $645
line 945
;945:		CG_AddToTeamChat( vchat->message );
ADDRFP4 0
INDIRP4
CNSTI4 162
ADDP4
ARGP4
ADDRGP4 CG_AddToTeamChat
CALLV
pop
line 946
;946:		CG_Printf( "%s\n", vchat->message );
ADDRGP4 $648
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 162
ADDP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 947
;947:	}
LABELV $645
line 948
;948:	voiceChatBuffer[cg.voiceChatBufferOut].snd = 0;
CNSTI4 312
ADDRGP4 cg+13336
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer+4
ADDP4
CNSTI4 0
ASGNI4
line 949
;949:}
LABELV $627
endproc CG_PlayVoiceChat 8 12
export CG_PlayBufferedVoiceChats
proc CG_PlayBufferedVoiceChats 0 4
line 956
;950:
;951:/*
;952:=====================
;953:CG_PlayBufferedVoieChats
;954:=====================
;955:*/
;956:void CG_PlayBufferedVoiceChats( void ) {
line 957
;957:	if ( cg.voiceChatTime < cg.time ) {
ADDRGP4 cg+13328
INDIRI4
ADDRGP4 cg+64
INDIRI4
GEI4 $652
line 958
;958:		if (cg.voiceChatBufferOut != cg.voiceChatBufferIn && voiceChatBuffer[cg.voiceChatBufferOut].snd) {
ADDRGP4 cg+13336
INDIRI4
ADDRGP4 cg+13332
INDIRI4
EQI4 $656
CNSTI4 312
ADDRGP4 cg+13336
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer+4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $656
line 960
;959:			//
;960:			CG_PlayVoiceChat(&voiceChatBuffer[cg.voiceChatBufferOut]);
CNSTI4 312
ADDRGP4 cg+13336
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer
ADDP4
ARGP4
ADDRGP4 CG_PlayVoiceChat
CALLV
pop
line 962
;961:			//
;962:			cg.voiceChatBufferOut = (cg.voiceChatBufferOut + 1) % MAX_VOICECHATBUFFER;
ADDRGP4 cg+13336
ADDRGP4 cg+13336
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 32
MODI4
ASGNI4
line 963
;963:			cg.voiceChatTime = cg.time + 1000;
ADDRGP4 cg+13328
ADDRGP4 cg+64
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 964
;964:		}
LABELV $656
line 965
;965:	}
LABELV $652
line 966
;966:}
LABELV $651
endproc CG_PlayBufferedVoiceChats 0 4
export CG_AddBufferedVoiceChat
proc CG_AddBufferedVoiceChat 8 12
line 973
;967:
;968:/*
;969:=====================
;970:CG_AddBufferedVoiceChat
;971:=====================
;972:*/
;973:void CG_AddBufferedVoiceChat( bufferedVoiceChat_t *vchat ) {
line 975
;974:	// if we are going into the intermission, don't start any voices
;975:	if ( cg.intermissionStarted ) {
ADDRGP4 cg+24
INDIRI4
CNSTI4 0
EQI4 $668
line 976
;976:		return;
ADDRGP4 $667
JUMPV
LABELV $668
line 979
;977:	}
;978:
;979:	memcpy(&voiceChatBuffer[cg.voiceChatBufferIn], vchat, sizeof(bufferedVoiceChat_t));
ADDRLP4 0
CNSTI4 312
ASGNI4
ADDRLP4 0
INDIRI4
ADDRGP4 cg+13332
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 980
;980:	cg.voiceChatBufferIn = (cg.voiceChatBufferIn + 1) % MAX_VOICECHATBUFFER;
ADDRGP4 cg+13332
ADDRGP4 cg+13332
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 32
MODI4
ASGNI4
line 981
;981:	if (cg.voiceChatBufferIn == cg.voiceChatBufferOut) {
ADDRGP4 cg+13332
INDIRI4
ADDRGP4 cg+13336
INDIRI4
NEI4 $674
line 982
;982:		CG_PlayVoiceChat( &voiceChatBuffer[cg.voiceChatBufferOut] );
CNSTI4 312
ADDRGP4 cg+13336
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer
ADDP4
ARGP4
ADDRGP4 CG_PlayVoiceChat
CALLV
pop
line 983
;983:		cg.voiceChatBufferOut++;
ADDRLP4 4
ADDRGP4 cg+13336
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 984
;984:	}
LABELV $674
line 985
;985:}
LABELV $667
endproc CG_AddBufferedVoiceChat 8 12
export CG_VoiceChatLocal
proc CG_VoiceChatLocal 340 28
line 992
;986:
;987:/*
;988:=================
;989:CG_VoiceChatLocal
;990:=================
;991:*/
;992:void CG_VoiceChatLocal( int mode, qboolean voiceOnly, int clientNum, int color, const char *cmd ) {
line 1000
;993:	char *chat;
;994:	voiceChatList_t *voiceChatList;
;995:	clientInfo_t *ci;
;996:	sfxHandle_t snd;
;997:	bufferedVoiceChat_t vchat;
;998:
;999:	// if we are going into the intermission, don't start any voices
;1000:	if ( cg.intermissionStarted ) {
ADDRGP4 cg+24
INDIRI4
CNSTI4 0
EQI4 $681
line 1001
;1001:		return;
ADDRGP4 $680
JUMPV
LABELV $681
line 1004
;1002:	}
;1003:
;1004:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 328
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 328
INDIRI4
CNSTI4 0
LTI4 $686
ADDRLP4 328
INDIRI4
CNSTI4 32
LTI4 $684
LABELV $686
line 1005
;1005:		clientNum = 0;
ADDRFP4 8
CNSTI4 0
ASGNI4
line 1006
;1006:	}
LABELV $684
line 1007
;1007:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 320
CNSTI4 788
ADDRFP4 8
INDIRI4
MULI4
ADDRGP4 cgs+43008
ADDP4
ASGNP4
line 1009
;1008:
;1009:	cgs.currentVoiceClient = clientNum;
ADDRGP4 cgs+70232
ADDRFP4 8
INDIRI4
ASGNI4
line 1011
;1010:
;1011:	voiceChatList = CG_VoiceChatListForClient( clientNum );
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 332
ADDRGP4 CG_VoiceChatListForClient
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 332
INDIRP4
ASGNP4
line 1013
;1012:
;1013:	if ( CG_GetVoiceChat( voiceChatList, cmd, &snd, &chat ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 324
ARGP4
ADDRLP4 316
ARGP4
ADDRLP4 336
ADDRGP4 CG_GetVoiceChat
CALLI4
ASGNI4
ADDRLP4 336
INDIRI4
CNSTI4 0
EQI4 $689
line 1015
;1014:		//
;1015:		if ( mode == SAY_TEAM || !cg_teamChatsOnly.integer ) {
ADDRFP4 0
INDIRI4
CNSTI4 1
EQI4 $694
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
CNSTI4 0
NEI4 $691
LABELV $694
line 1016
;1016:			vchat.clientNum = clientNum;
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
line 1017
;1017:			vchat.snd = snd;
ADDRLP4 4+4
ADDRLP4 324
INDIRI4
ASGNI4
line 1018
;1018:			vchat.voiceOnly = voiceOnly;
ADDRLP4 4+8
ADDRFP4 4
INDIRI4
ASGNI4
line 1019
;1019:			Q_strncpyz(vchat.cmd, cmd, sizeof(vchat.cmd));
ADDRLP4 4+12
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1020
;1020:			if ( mode == SAY_TELL ) {
ADDRFP4 0
INDIRI4
CNSTI4 2
NEI4 $699
line 1021
;1021:				Com_sprintf(vchat.message, sizeof(vchat.message), "[%s]: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
ADDRLP4 4+162
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 $703
ARGP4
ADDRLP4 320
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 94
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 316
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1022
;1022:			}
ADDRGP4 $700
JUMPV
LABELV $699
line 1023
;1023:			else if ( mode == SAY_TEAM ) {
ADDRFP4 0
INDIRI4
CNSTI4 1
NEI4 $704
line 1024
;1024:				Com_sprintf(vchat.message, sizeof(vchat.message), "(%s): %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
ADDRLP4 4+162
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 $708
ARGP4
ADDRLP4 320
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 94
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 316
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1025
;1025:			}
ADDRGP4 $705
JUMPV
LABELV $704
line 1026
;1026:			else {
line 1027
;1027:				Com_sprintf(vchat.message, sizeof(vchat.message), "%s: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
ADDRLP4 4+162
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 $711
ARGP4
ADDRLP4 320
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 94
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 316
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1028
;1028:			}
LABELV $705
LABELV $700
line 1029
;1029:			CG_AddBufferedVoiceChat(&vchat);
ADDRLP4 4
ARGP4
ADDRGP4 CG_AddBufferedVoiceChat
CALLV
pop
line 1030
;1030:		}
LABELV $691
line 1031
;1031:	}
LABELV $689
line 1032
;1032:}
LABELV $680
endproc CG_VoiceChatLocal 340 28
export CG_VoiceChat
proc CG_VoiceChat 64 20
line 1039
;1033:
;1034:/*
;1035:=================
;1036:CG_VoiceChat
;1037:=================
;1038:*/
;1039:void CG_VoiceChat( int mode ) {
line 1044
;1040:	const char *cmd;
;1041:	int clientNum, color;
;1042:	qboolean voiceOnly;
;1043:
;1044:	voiceOnly = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 20
INDIRI4
ASGNI4
line 1045
;1045:	clientNum = atoi(CG_Argv(2));
CNSTI4 2
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 28
INDIRI4
ASGNI4
line 1046
;1046:	color = atoi(CG_Argv(3));
CNSTI4 3
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 36
INDIRI4
ASGNI4
line 1047
;1047:	cmd = CG_Argv(4);
CNSTI4 4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 1049
;1048:
;1049:	if (cg_noTaunt.integer != 0) {
ADDRGP4 cg_noTaunt+12
INDIRI4
CNSTI4 0
EQI4 $713
line 1050
;1050:		if (!strcmp(cmd, VOICECHAT_KILLINSULT)  || !strcmp(cmd, VOICECHAT_TAUNT) || \
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $718
ARGP4
ADDRLP4 44
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $726
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $719
ARGP4
ADDRLP4 48
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $726
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $720
ARGP4
ADDRLP4 52
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
EQI4 $726
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $721
ARGP4
ADDRLP4 56
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $726
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $722
ARGP4
ADDRLP4 60
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $716
LABELV $726
line 1053
;1051:			!strcmp(cmd, VOICECHAT_DEATHINSULT) || !strcmp(cmd, VOICECHAT_KILLGAUNTLET) || \
;1052:			!strcmp(cmd, VOICECHAT_PRAISE)) {
;1053:			return;
ADDRGP4 $712
JUMPV
LABELV $716
line 1055
;1054:		}
;1055:	}
LABELV $713
line 1057
;1056:
;1057:	CG_VoiceChatLocal( mode, voiceOnly, clientNum, color, cmd );
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_VoiceChatLocal
CALLV
pop
line 1058
;1058:}
LABELV $712
endproc CG_VoiceChat 64 20
proc CG_RemoveChatEscapeChar 16 0
line 1065
;1059:
;1060:/*
;1061:=================
;1062:CG_RemoveChatEscapeChar
;1063:=================
;1064:*/
;1065:static void CG_RemoveChatEscapeChar( char *text ) {
line 1068
;1066:	int i, l;
;1067:
;1068:	l = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1069
;1069:	for ( i = 0; text[i]; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $731
JUMPV
LABELV $728
line 1070
;1070:		if (text[i] == '\x19')
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 25
NEI4 $732
line 1071
;1071:			continue;
ADDRGP4 $729
JUMPV
LABELV $732
line 1072
;1072:		text[l++] = text[i];
ADDRLP4 8
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 1073
;1073:	}
LABELV $729
line 1069
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $731
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $728
line 1074
;1074:	text[l] = '\0';
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 1075
;1075:}
LABELV $727
endproc CG_RemoveChatEscapeChar 16 0
export CG_CheckSVStripEdRef
proc CG_CheckSVStripEdRef 1084 12
line 1080
;1076:
;1077:#define MAX_STRIPED_SV_STRING 1024
;1078:
;1079:void CG_CheckSVStripEdRef(char *buf, const char *str)
;1080:{ //I don't really like doing this. But it utilizes the system that was already in place.
line 1081
;1081:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1082
;1082:	int b = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 1083
;1083:	int strLen = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1084
;1084:	qboolean gotStrip = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1086
;1085:
;1086:	if (!str || !str[0])
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $737
ADDRLP4 16
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $735
LABELV $737
line 1087
;1087:	{
line 1088
;1088:		if (str)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $734
line 1089
;1089:		{
line 1090
;1090:			strcpy(buf, str);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1091
;1091:		}
line 1092
;1092:		return;
ADDRGP4 $734
JUMPV
LABELV $735
line 1095
;1093:	}
;1094:
;1095:	strcpy(buf, str);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1097
;1096:
;1097:	strLen = strlen(str);
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 1099
;1098:
;1099:	if (strLen >= MAX_STRIPED_SV_STRING)
ADDRLP4 4
INDIRI4
CNSTI4 1024
LTI4 $743
line 1100
;1100:	{
line 1101
;1101:		return;
ADDRGP4 $734
JUMPV
LABELV $742
line 1105
;1102:	}
;1103:
;1104:	while (i < strLen && str[i])
;1105:	{
line 1106
;1106:		gotStrip = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1108
;1107:
;1108:		if (str[i] == '@' && (i+1) < strLen)
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 64
NEI4 $745
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ADDRLP4 4
INDIRI4
GEI4 $745
line 1109
;1109:		{
line 1110
;1110:			if (str[i+1] == '@' && (i+2) < strLen)
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 64
NEI4 $747
ADDRLP4 0
INDIRI4
CNSTI4 2
ADDI4
ADDRLP4 4
INDIRI4
GEI4 $747
line 1111
;1111:			{
line 1112
;1112:				if (str[i+2] == '@' && (i+3) < strLen)
ADDRLP4 0
INDIRI4
CNSTI4 2
ADDI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 64
NEI4 $749
ADDRLP4 0
INDIRI4
CNSTI4 3
ADDI4
ADDRLP4 4
INDIRI4
GEI4 $749
line 1113
;1113:				{ //@@@ should mean to insert a striped reference here, so insert it into buf at the current place
line 1115
;1114:					char stripRef[MAX_STRIPED_SV_STRING];
;1115:					int r = 0;
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 $752
JUMPV
LABELV $751
line 1118
;1116:
;1117:					while (i < strLen && str[i] == '@')
;1118:					{
line 1119
;1119:						i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1120
;1120:					}
LABELV $752
line 1117
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
GEI4 $754
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 64
EQI4 $751
LABELV $754
ADDRGP4 $756
JUMPV
LABELV $755
line 1123
;1121:
;1122:					while (i < strLen && str[i] && str[i] != ' ' && str[i] != ':' && str[i] != '.' && str[i] != '\n')
;1123:					{
line 1124
;1124:						stripRef[r] = str[i];
ADDRLP4 36
INDIRI4
ADDRLP4 40
ADDP4
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 1125
;1125:						r++;
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1126
;1126:						i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1127
;1127:					}
LABELV $756
line 1122
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
GEI4 $762
ADDRLP4 1072
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 1072
INDIRI4
CNSTI4 0
EQI4 $762
ADDRLP4 1072
INDIRI4
CNSTI4 32
EQI4 $762
ADDRLP4 1072
INDIRI4
CNSTI4 58
EQI4 $762
ADDRLP4 1072
INDIRI4
CNSTI4 46
EQI4 $762
ADDRLP4 1072
INDIRI4
CNSTI4 10
NEI4 $755
LABELV $762
line 1128
;1128:					stripRef[r] = 0;
ADDRLP4 36
INDIRI4
ADDRLP4 40
ADDP4
CNSTI1 0
ASGNI1
line 1130
;1129:
;1130:					buf[b] = 0;
ADDRLP4 12
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 1131
;1131:					Q_strcat(buf, MAX_STRIPED_SV_STRING, CG_GetStripEdString("SVINGAME", stripRef));
ADDRGP4 $514
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 1076
ADDRGP4 CG_GetStripEdString
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 1076
INDIRP4
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 1132
;1132:					b = strlen(buf);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 1080
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 1080
INDIRI4
ASGNI4
line 1133
;1133:				}
LABELV $749
line 1134
;1134:			}
LABELV $747
line 1135
;1135:		}
LABELV $745
line 1137
;1136:
;1137:		if (!gotStrip)
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $763
line 1138
;1138:		{
line 1139
;1139:			buf[b] = str[i];
ADDRLP4 12
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 1140
;1140:			b++;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1141
;1141:		}
LABELV $763
line 1142
;1142:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1143
;1143:	}
LABELV $743
line 1104
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
GEI4 $765
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $742
LABELV $765
line 1145
;1144:
;1145:	buf[b] = 0;
ADDRLP4 12
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 1146
;1146:}
LABELV $734
endproc CG_CheckSVStripEdRef 1084 12
proc CG_ServerCommand 1404 20
line 1156
;1147:
;1148:/*
;1149:=================
;1150:CG_ServerCommand
;1151:
;1152:The string has been tokenized and can be retrieved with
;1153:Cmd_Argc() / Cmd_Argv()
;1154:=================
;1155:*/
;1156:static void CG_ServerCommand( void ) {
line 1160
;1157:	const char	*cmd;
;1158:	char		text[MAX_SAY_TEXT];
;1159:
;1160:	cmd = CG_Argv(0);
CNSTI4 0
ARGI4
ADDRLP4 156
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 156
INDIRP4
ASGNP4
line 1162
;1161:
;1162:	if ( !cmd[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $767
line 1164
;1163:		// server claimed the command
;1164:		return;
ADDRGP4 $766
JUMPV
LABELV $767
line 1167
;1165:	}
;1166:
;1167:	if ( !strcmp( cmd, "spd" ) ) 
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $771
ARGP4
ADDRLP4 160
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 160
INDIRI4
CNSTI4 0
NEI4 $769
line 1168
;1168:	{
line 1173
;1169:		const char *ID;
;1170:		int holdInt,count,i;
;1171:		char string[1204];
;1172:
;1173:		count = trap_Argc();
ADDRLP4 1384
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 1372
ADDRLP4 1384
INDIRI4
ASGNI4
line 1175
;1174:
;1175:		ID =  CG_Argv(1);
CNSTI4 1
ARGI4
ADDRLP4 1388
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 1376
ADDRLP4 1388
INDIRP4
ASGNP4
line 1176
;1176:		holdInt = atoi(ID);
ADDRLP4 1376
INDIRP4
ARGP4
ADDRLP4 1392
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 1380
ADDRLP4 1392
INDIRI4
ASGNI4
line 1178
;1177:
;1178:		memset( &string, 0, sizeof( string ) );
ADDRLP4 164
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1204
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1180
;1179:
;1180:		Com_sprintf( string,sizeof(string)," \"%s\"", (const char *) CG_Argv(2));
CNSTI4 2
ARGI4
ADDRLP4 1396
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 164
ARGP4
CNSTI4 1204
ARGI4
ADDRGP4 $772
ARGP4
ADDRLP4 1396
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1182
;1181:
;1182:		for (i=3;i<count;i++)
ADDRLP4 1368
CNSTI4 3
ASGNI4
ADDRGP4 $776
JUMPV
LABELV $773
line 1183
;1183:		{
line 1184
;1184:			Com_sprintf( string,sizeof(string)," %s \"%s\"", string, (const char *) CG_Argv(i));
ADDRLP4 1368
INDIRI4
ARGI4
ADDRLP4 1400
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 164
ARGP4
CNSTI4 1204
ARGI4
ADDRGP4 $777
ARGP4
ADDRLP4 164
ARGP4
ADDRLP4 1400
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1185
;1185:		}
LABELV $774
line 1182
ADDRLP4 1368
ADDRLP4 1368
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $776
ADDRLP4 1368
INDIRI4
ADDRLP4 1372
INDIRI4
LTI4 $773
line 1187
;1186:
;1187:		trap_SP_Print(holdInt, (byte *)string);
ADDRLP4 1380
INDIRI4
CVIU4 4
ARGU4
ADDRLP4 164
ARGP4
ADDRGP4 trap_SP_Print
CALLV
pop
line 1188
;1188:		return;
ADDRGP4 $766
JUMPV
LABELV $769
line 1191
;1189:	}
;1190:
;1191:	if ( !strcmp( cmd, "nfr" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $780
ARGP4
ADDRLP4 164
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
NEI4 $778
line 1192
;1192:	{ //"nfr" == "new force rank" (want a short string)
line 1193
;1193:		int doMenu = 0;
ADDRLP4 168
CNSTI4 0
ASGNI4
line 1194
;1194:		int setTeam = 0;
ADDRLP4 172
CNSTI4 0
ASGNI4
line 1195
;1195:		int newRank = 0;
ADDRLP4 176
CNSTI4 0
ASGNI4
line 1197
;1196:
;1197:		if (trap_Argc() < 3)
ADDRLP4 180
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 3
GEI4 $781
line 1198
;1198:		{
line 1202
;1199:#ifdef _DEBUG
;1200:			Com_Printf("WARNING: Invalid newForceRank string\n");
;1201:#endif
;1202:			return;
ADDRGP4 $766
JUMPV
LABELV $781
line 1205
;1203:		}
;1204:
;1205:		newRank = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 184
INDIRP4
ARGP4
ADDRLP4 188
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 176
ADDRLP4 188
INDIRI4
ASGNI4
line 1206
;1206:		doMenu = atoi(CG_Argv(2));
CNSTI4 2
ARGI4
ADDRLP4 192
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 192
INDIRP4
ARGP4
ADDRLP4 196
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 168
ADDRLP4 196
INDIRI4
ASGNI4
line 1207
;1207:		setTeam = atoi(CG_Argv(3));
CNSTI4 3
ARGI4
ADDRLP4 200
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 204
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 172
ADDRLP4 204
INDIRI4
ASGNI4
line 1209
;1208:
;1209:		trap_Cvar_Set("ui_rankChange", va("%i", newRank));
ADDRGP4 $219
ARGP4
ADDRLP4 176
INDIRI4
ARGI4
ADDRLP4 208
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $783
ARGP4
ADDRLP4 208
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1211
;1210:
;1211:		trap_Cvar_Set("ui_myteam", va("%i", setTeam));
ADDRGP4 $219
ARGP4
ADDRLP4 172
INDIRI4
ARGI4
ADDRLP4 212
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $784
ARGP4
ADDRLP4 212
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1213
;1212:
;1213:		if (!( trap_Key_GetCatcher() & KEYCATCH_UI ) && doMenu)
ADDRLP4 216
ADDRGP4 trap_Key_GetCatcher
CALLI4
ASGNI4
ADDRLP4 220
CNSTI4 0
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 2
BANDI4
ADDRLP4 220
INDIRI4
NEI4 $766
ADDRLP4 168
INDIRI4
ADDRLP4 220
INDIRI4
EQI4 $766
line 1214
;1214:		{
line 1215
;1215:			trap_OpenUIMenu(3);
CNSTI4 3
ARGI4
ADDRGP4 trap_OpenUIMenu
CALLV
pop
line 1216
;1216:		}
line 1218
;1217:
;1218:		return;
ADDRGP4 $766
JUMPV
LABELV $778
line 1221
;1219:	}
;1220:
;1221:	if ( !strcmp( cmd, "kg2" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $789
ARGP4
ADDRLP4 168
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
NEI4 $787
line 1222
;1222:	{ //Kill a ghoul2 instance in this slot.
line 1225
;1223:	  //If it has been occupied since this message was sent somehow, the worst that can (should) happen
;1224:	  //is the instance will have to reinit with its current info.
;1225:		int indexNum = 0;
ADDRLP4 172
CNSTI4 0
ASGNI4
line 1226
;1226:		int argNum = trap_Argc();
ADDRLP4 184
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 180
ADDRLP4 184
INDIRI4
ASGNI4
line 1227
;1227:		int i = 1;
ADDRLP4 176
CNSTI4 1
ASGNI4
line 1229
;1228:		
;1229:		if (argNum < 1)
ADDRLP4 180
INDIRI4
CNSTI4 1
GEI4 $793
line 1230
;1230:		{
line 1231
;1231:			return;
ADDRGP4 $766
JUMPV
LABELV $792
line 1235
;1232:		}
;1233:
;1234:		while (i < argNum)
;1235:		{
line 1236
;1236:			indexNum = atoi(CG_Argv(i));
ADDRLP4 176
INDIRI4
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 172
ADDRLP4 192
INDIRI4
ASGNI4
line 1238
;1237:
;1238:			if (cg_entities[indexNum].ghoul2 && trap_G2_HaveWeGhoul2Models(cg_entities[indexNum].ghoul2))
ADDRLP4 196
CNSTI4 1920
ADDRLP4 172
INDIRI4
MULI4
ASGNI4
ADDRLP4 196
INDIRI4
ADDRGP4 cg_entities+952
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $795
ADDRLP4 196
INDIRI4
ADDRGP4 cg_entities+952
ADDP4
INDIRP4
ARGP4
ADDRLP4 200
ADDRGP4 trap_G2_HaveWeGhoul2Models
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
EQI4 $795
line 1239
;1239:			{
line 1240
;1240:				if (indexNum < MAX_CLIENTS)
ADDRLP4 172
INDIRI4
CNSTI4 32
GEI4 $799
line 1241
;1241:				{ //You try to do very bad thing!
line 1245
;1242:#ifdef _DEBUG
;1243:					Com_Printf("WARNING: Tried to kill a client ghoul2 instance with a kg2 command!\n");
;1244:#endif
;1245:					return;
ADDRGP4 $766
JUMPV
LABELV $799
line 1247
;1246:				}
;1247:				trap_G2API_CleanGhoul2Models(&(cg_entities[indexNum].ghoul2));
CNSTI4 1920
ADDRLP4 172
INDIRI4
MULI4
ADDRGP4 cg_entities+952
ADDP4
ARGP4
ADDRGP4 trap_G2API_CleanGhoul2Models
CALLV
pop
line 1248
;1248:			}
LABELV $795
line 1250
;1249:
;1250:			i++;
ADDRLP4 176
ADDRLP4 176
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1251
;1251:		}
LABELV $793
line 1234
ADDRLP4 176
INDIRI4
ADDRLP4 180
INDIRI4
LTI4 $792
line 1253
;1252:		
;1253:		return;
ADDRGP4 $766
JUMPV
LABELV $787
line 1256
;1254:	}
;1255:
;1256:	if ( !strcmp( cmd, "cp" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $804
ARGP4
ADDRLP4 172
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 172
INDIRI4
CNSTI4 0
NEI4 $802
line 1258
;1257:		char strEd[MAX_STRIPED_SV_STRING];
;1258:		CG_CheckSVStripEdRef(strEd, CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 1200
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 176
ARGP4
ADDRLP4 1200
INDIRP4
ARGP4
ADDRGP4 CG_CheckSVStripEdRef
CALLV
pop
line 1259
;1259:		CG_CenterPrint( strEd, SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH );
ADDRLP4 176
ARGP4
CNSTI4 144
ARGI4
CNSTI4 16
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 1260
;1260:		return;
ADDRGP4 $766
JUMPV
LABELV $802
line 1263
;1261:	}
;1262:
;1263:	if ( !strcmp( cmd, "cs" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $807
ARGP4
ADDRLP4 176
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 0
NEI4 $805
line 1264
;1264:		CG_ConfigStringModified();
ADDRGP4 CG_ConfigStringModified
CALLV
pop
line 1265
;1265:		return;
ADDRGP4 $766
JUMPV
LABELV $805
line 1268
;1266:	}
;1267:
;1268:	if ( !strcmp( cmd, "print" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $810
ARGP4
ADDRLP4 180
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 0
NEI4 $808
line 1270
;1269:		char strEd[MAX_STRIPED_SV_STRING];
;1270:		CG_CheckSVStripEdRef(strEd, CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 1208
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 184
ARGP4
ADDRLP4 1208
INDIRP4
ARGP4
ADDRGP4 CG_CheckSVStripEdRef
CALLV
pop
line 1271
;1271:		CG_Printf( "%s", strEd );
ADDRGP4 $540
ARGP4
ADDRLP4 184
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1272
;1272:		return;
ADDRGP4 $766
JUMPV
LABELV $808
line 1275
;1273:	}
;1274:
;1275:	if ( !strcmp( cmd, "chat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $813
ARGP4
ADDRLP4 184
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
NEI4 $811
line 1276
;1276:		if ( !cg_teamChatsOnly.integer ) {
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
CNSTI4 0
NEI4 $766
line 1277
;1277:			trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+70280+720
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1278
;1278:			Q_strncpyz( text, CG_Argv(1), MAX_SAY_TEXT );
CNSTI4 1
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 188
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1279
;1279:			CG_RemoveChatEscapeChar( text );
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1280
;1280:			CG_Printf( "%s\n", text );
ADDRGP4 $648
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1281
;1281:		}
line 1282
;1282:		return;
ADDRGP4 $766
JUMPV
LABELV $811
line 1285
;1283:	}
;1284:
;1285:	if ( !strcmp( cmd, "tchat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $821
ARGP4
ADDRLP4 188
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $819
line 1286
;1286:		trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+70280+720
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1287
;1287:		Q_strncpyz( text, CG_Argv(1), MAX_SAY_TEXT );
CNSTI4 1
ARGI4
ADDRLP4 192
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 192
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1288
;1288:		CG_RemoveChatEscapeChar( text );
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1289
;1289:		CG_AddToTeamChat( text );
ADDRLP4 4
ARGP4
ADDRGP4 CG_AddToTeamChat
CALLV
pop
line 1290
;1290:		CG_Printf( "%s\n", text );
ADDRGP4 $648
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1291
;1291:		return;
ADDRGP4 $766
JUMPV
LABELV $819
line 1293
;1292:	}
;1293:	if ( !strcmp( cmd, "vchat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $826
ARGP4
ADDRLP4 192
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
NEI4 $824
line 1294
;1294:		CG_VoiceChat( SAY_ALL );
CNSTI4 0
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1295
;1295:		return;
ADDRGP4 $766
JUMPV
LABELV $824
line 1298
;1296:	}
;1297:
;1298:	if ( !strcmp( cmd, "vtchat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $829
ARGP4
ADDRLP4 196
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 0
NEI4 $827
line 1299
;1299:		CG_VoiceChat( SAY_TEAM );
CNSTI4 1
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1300
;1300:		return;
ADDRGP4 $766
JUMPV
LABELV $827
line 1303
;1301:	}
;1302:
;1303:	if ( !strcmp( cmd, "vtell" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $832
ARGP4
ADDRLP4 200
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
NEI4 $830
line 1304
;1304:		CG_VoiceChat( SAY_TELL );
CNSTI4 2
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1305
;1305:		return;
ADDRGP4 $766
JUMPV
LABELV $830
line 1308
;1306:	}
;1307:
;1308:	if ( !strcmp( cmd, "scores" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $835
ARGP4
ADDRLP4 204
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
NEI4 $833
line 1309
;1309:		CG_ParseScores();
ADDRGP4 CG_ParseScores
CALLV
pop
line 1310
;1310:		return;
ADDRGP4 $766
JUMPV
LABELV $833
line 1313
;1311:	}
;1312:
;1313:	if ( !strcmp( cmd, "tinfo" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $838
ARGP4
ADDRLP4 208
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
NEI4 $836
line 1314
;1314:		CG_ParseTeamInfo();
ADDRGP4 CG_ParseTeamInfo
CALLV
pop
line 1315
;1315:		return;
ADDRGP4 $766
JUMPV
LABELV $836
line 1318
;1316:	}
;1317:
;1318:	if ( !strcmp( cmd, "map_restart" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $841
ARGP4
ADDRLP4 212
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
NEI4 $839
line 1319
;1319:		CG_MapRestart();
ADDRGP4 CG_MapRestart
CALLV
pop
line 1320
;1320:		return;
ADDRGP4 $766
JUMPV
LABELV $839
line 1323
;1321:	}
;1322:
;1323:  if ( Q_stricmp (cmd, "remapShader") == 0 ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $844
ARGP4
ADDRLP4 216
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
NEI4 $842
line 1324
;1324:		if (trap_Argc() == 4) {
ADDRLP4 220
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 220
INDIRI4
CNSTI4 4
NEI4 $845
line 1325
;1325:			trap_R_RemapShader(CG_Argv(1), CG_Argv(2), CG_Argv(3));
CNSTI4 1
ARGI4
ADDRLP4 224
ADDRGP4 CG_Argv
CALLP4
ASGNP4
CNSTI4 2
ARGI4
ADDRLP4 228
ADDRGP4 CG_Argv
CALLP4
ASGNP4
CNSTI4 3
ARGI4
ADDRLP4 232
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRLP4 228
INDIRP4
ARGP4
ADDRLP4 232
INDIRP4
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 1326
;1326:		}
LABELV $845
line 1327
;1327:	}
LABELV $842
line 1330
;1328:
;1329:	// loaddeferred can be both a servercmd and a consolecmd
;1330:	if ( !strcmp( cmd, "loaddefered" ) ) {	// FIXME: spelled wrong, but not changing for demo
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $849
ARGP4
ADDRLP4 220
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 220
INDIRI4
CNSTI4 0
NEI4 $847
line 1331
;1331:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 1332
;1332:		return;
ADDRGP4 $766
JUMPV
LABELV $847
line 1337
;1333:	}
;1334:
;1335:	// clientLevelShot is sent before taking a special screenshot for
;1336:	// the menu system during development
;1337:	if ( !strcmp( cmd, "clientLevelShot" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $852
ARGP4
ADDRLP4 224
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 224
INDIRI4
CNSTI4 0
NEI4 $850
line 1338
;1338:		cg.levelShot = qtrue;
ADDRGP4 cg+12
CNSTI4 1
ASGNI4
line 1339
;1339:		return;
ADDRGP4 $766
JUMPV
LABELV $850
line 1342
;1340:	}
;1341:
;1342:	CG_Printf( "Unknown client game command: %s\n", cmd );
ADDRGP4 $854
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1343
;1343:}
LABELV $766
endproc CG_ServerCommand 1404 20
export CG_ExecuteNewServerCommands
proc CG_ExecuteNewServerCommands 12 4
line 1354
;1344:
;1345:
;1346:/*
;1347:====================
;1348:CG_ExecuteNewServerCommands
;1349:
;1350:Execute all of the server commands that were received along
;1351:with this this snapshot.
;1352:====================
;1353:*/
;1354:void CG_ExecuteNewServerCommands( int latestSequence ) {
ADDRGP4 $857
JUMPV
LABELV $856
line 1355
;1355:	while ( cgs.serverCommandSequence < latestSequence ) {
line 1356
;1356:		if ( trap_GetServerCommand( ++cgs.serverCommandSequence ) ) {
ADDRLP4 0
ADDRGP4 cgs+32948
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 trap_GetServerCommand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $860
line 1357
;1357:			CG_ServerCommand();
ADDRGP4 CG_ServerCommand
CALLV
pop
line 1358
;1358:		}
LABELV $860
line 1359
;1359:	}
LABELV $857
line 1355
ADDRGP4 cgs+32948
INDIRI4
ADDRFP4 0
INDIRI4
LTI4 $856
line 1360
;1360:}
LABELV $855
endproc CG_ExecuteNewServerCommands 12 4
bss
export voiceChatBuffer
align 4
LABELV voiceChatBuffer
skip 9984
export voiceChatLists
align 4
LABELV voiceChatLists
skip 2263616
import CG_LoadClientInfo
import CG_SetLightstyle
import CG_RunLightStyles
import CG_ClearLightStyles
import g2WeaponInstances
import CG_CheckPlayerG2Weapons
import CG_CopyG2WeaponInstance
import CG_ShutDownG2Weapons
import CG_InitG2Weapons
import CG_CreateBBRefEnts
import CG_SetGhoul2Info
import CG_Init_CGents
import CG_Init_CG
import trap_G2API_SetNewOrigin
import trap_G2API_SetSurfaceOnOff
import trap_G2API_SetRootSurface
import trap_G2API_SetBoneAnim
import trap_G2API_GetGLAName
import trap_G2API_SetBoneAngles
import trap_G2API_CleanGhoul2Models
import trap_G2API_SetBoltInfo
import trap_G2API_AddBolt
import trap_G2API_RemoveGhoul2Model
import trap_G2API_HasGhoul2ModelOnIndex
import trap_G2API_DuplicateGhoul2Instance
import trap_G2API_CopySpecificGhoul2Model
import trap_G2API_CopyGhoul2Instance
import trap_G2API_GiveMeVectorFromMatrix
import trap_G2API_InitGhoul2Model
import trap_G2API_GetBoltMatrix_NoReconstruct
import trap_G2API_GetBoltMatrix
import trap_G2_HaveWeGhoul2Models
import trap_G2_SetGhoul2ModelIndexes
import trap_G2_ListModelBones
import trap_G2_ListModelSurfaces
import FX_ForceDrained
import FX_BlasterWeaponHitPlayer
import FX_BlasterWeaponHitWall
import FX_BlasterAltFireThink
import FX_BlasterProjectileThink
import FX_BryarAltHitPlayer
import FX_BryarHitPlayer
import FX_BryarAltHitWall
import FX_BryarHitWall
import CG_Spark
import FX_TurretHitPlayer
import FX_TurretHitWall
import FX_TurretProjectileThink
import CG_NewParticleArea
import initparticles
import CG_GetStripEdString
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_ROFF_Purge_Ent
import trap_ROFF_Play
import trap_ROFF_Cache
import trap_ROFF_UpdateEntities
import trap_ROFF_Clean
import trap_CG_RegisterSharedMemory
import trap_SP_GetStringTextString
import trap_SP_Print
import trap_FX_AddSprite
import trap_FX_AddPrimitive
import trap_FX_AddBezier
import trap_FX_AddPoly
import trap_FX_AdjustTime
import trap_FX_FreeSystem
import trap_FX_InitSystem
import trap_FX_AddScheduledEffects
import trap_FX_PlayBoltedEffectID
import trap_FX_PlayEntityEffectID
import trap_FX_PlayEffectID
import trap_FX_PlaySimpleEffectID
import trap_FX_PlayEntityEffect
import trap_FX_PlayEffect
import trap_FX_PlaySimpleEffect
import trap_FX_RegisterEffect
import trap_R_inPVS
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import BG_CycleForce
import BG_ProperForceIndex
import BG_CycleInven
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_OpenUIMenu
import trap_SetClientTurnExtent
import trap_SetClientForceAngle
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_FX_AddLine
import trap_R_GetBModelVerts
import trap_R_SetLightStyle
import trap_R_GetLightStyle
import trap_R_RemapShader
import trap_R_DrawRotatePic2
import trap_R_DrawRotatePic
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_AnyLanguage_ReadCharFromString
import trap_R_Font_DrawString
import trap_R_Font_HeightPixels
import trap_R_Font_StrLenChars
import trap_R_Font_StrLenPixels
import trap_R_RegisterFont
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_S_MuteSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_SagaObjectiveCompleted
import CG_SagaRoundOver
import CG_InitSagaMode
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_IsMindTricked
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_InitGlass
import CG_TestLine
import CG_SurfaceExplosion
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_CreateDebris
import CG_GlassShatter
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawIconBackground
import CG_DrawWeaponSelect
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_GetClientWeaponMuzzleBoltPoint
import TurretClientRun
import ScaleModelAxis
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_ManualEntityRender
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_ReattachLimb
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_PlayerShieldHit
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_DeferMenuScript
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawScaledProportionalString
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawNumField
import CG_DrawString
import CG_DrawRotatePic2
import CG_DrawRotatePic
import CG_DrawPic
import CG_FillRect
import CG_TestModelAnimate_f
import CG_TestModelSetAnglespost_f
import CG_TestModelSetAnglespre_f
import CG_ListModelBones_f
import CG_ListModelSurfaces_f
import CG_TestModelSurfaceOnOff_f
import CG_TestG2Model_f
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_PrevForcePower_f
import CG_NextForcePower_f
import CG_PrevInventory_f
import CG_NextInventory_f
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_debugBB
import ui_myteam
import cg_recordSPDemoName
import cg_recordSPDemo
import cg_singlePlayerActive
import cg_enableBreath
import cg_enableDust
import cg_singlePlayer
import cg_currentSelectedPlayerName
import cg_currentSelectedPlayer
import cg_blueTeamName
import cg_redTeamName
import cg_trueLightning
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_hudFiles
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_forceModel
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawEnemyInfo
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPersonHorzOffset
import cg_thirdPersonAlpha
import cg_thirdPersonTargetDamp
import cg_thirdPersonCameraDamp
import cg_thirdPersonVertOffset
import cg_thirdPersonPitchOffset
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_thirdPerson
import cg_dismember
import cg_animBlend
import cg_auraShell
import cg_speedTrail
import cg_saberTrail
import cg_saberContact
import cg_swingAngles
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_dynamicCrosshair
import cg_drawScores
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CGCam_SetMusicMult
import CGCam_Shake
import cgScreenEffects
import ammoTicPos
import forceTicPos
import forcePowerDarkLight
import WeaponAttackAnim
import WeaponReadyAnim
import BG_OutOfMemory
import BG_StringAlloc
import BG_TempFree
import BG_TempAlloc
import BG_AllocUnaligned
import BG_Alloc
import BG_CanUseFPNow
import BG_HasYsalamiri
import BG_GetItemIndexByTag
import BG_ParseAnimationFile
import BG_PlayerTouchesItem
import BG_G2PlayerAngles
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_ForcePowerDrain
import BG_SaberStartTransAnim
import BG_InDeathAnim
import BG_InRoll
import BG_SaberInSpecialAttack
import BG_SpinningSaberAnim
import BG_FlippingAnim
import BG_SaberInIdle
import BG_SaberInSpecial
import BG_SaberInAttack
import BG_DirectFlippingAnim
import BG_InSaberStandAnim
import BG_InSpecialJump
import BG_LegalizedForcePowers
import saberMoveData
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import vectoyaw
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import pm
import bgForcePowerCost
import forceMasteryPoints
import forceMasteryLevels
import bgGlobalAnimations
import BGPAFtextLoaded
import forcePowerSorted
import WP_MuzzlePoint
import ammoData
import weaponData
import GetStringForID
import GetIDForString
import Q_irand
import irand
import flrand
import Rand_Init
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import SkipWhitespace
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import powf
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkBlue
import colorLtBlue
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import colorTable
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import forceSpeedLevels
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $854
char 1 85
char 1 110
char 1 107
char 1 110
char 1 111
char 1 119
char 1 110
char 1 32
char 1 99
char 1 108
char 1 105
char 1 101
char 1 110
char 1 116
char 1 32
char 1 103
char 1 97
char 1 109
char 1 101
char 1 32
char 1 99
char 1 111
char 1 109
char 1 109
char 1 97
char 1 110
char 1 100
char 1 58
char 1 32
char 1 37
char 1 115
char 1 10
char 1 0
align 1
LABELV $852
char 1 99
char 1 108
char 1 105
char 1 101
char 1 110
char 1 116
char 1 76
char 1 101
char 1 118
char 1 101
char 1 108
char 1 83
char 1 104
char 1 111
char 1 116
char 1 0
align 1
LABELV $849
char 1 108
char 1 111
char 1 97
char 1 100
char 1 100
char 1 101
char 1 102
char 1 101
char 1 114
char 1 101
char 1 100
char 1 0
align 1
LABELV $844
char 1 114
char 1 101
char 1 109
char 1 97
char 1 112
char 1 83
char 1 104
char 1 97
char 1 100
char 1 101
char 1 114
char 1 0
align 1
LABELV $841
char 1 109
char 1 97
char 1 112
char 1 95
char 1 114
char 1 101
char 1 115
char 1 116
char 1 97
char 1 114
char 1 116
char 1 0
align 1
LABELV $838
char 1 116
char 1 105
char 1 110
char 1 102
char 1 111
char 1 0
align 1
LABELV $835
char 1 115
char 1 99
char 1 111
char 1 114
char 1 101
char 1 115
char 1 0
align 1
LABELV $832
char 1 118
char 1 116
char 1 101
char 1 108
char 1 108
char 1 0
align 1
LABELV $829
char 1 118
char 1 116
char 1 99
char 1 104
char 1 97
char 1 116
char 1 0
align 1
LABELV $826
char 1 118
char 1 99
char 1 104
char 1 97
char 1 116
char 1 0
align 1
LABELV $821
char 1 116
char 1 99
char 1 104
char 1 97
char 1 116
char 1 0
align 1
LABELV $813
char 1 99
char 1 104
char 1 97
char 1 116
char 1 0
align 1
LABELV $810
char 1 112
char 1 114
char 1 105
char 1 110
char 1 116
char 1 0
align 1
LABELV $807
char 1 99
char 1 115
char 1 0
align 1
LABELV $804
char 1 99
char 1 112
char 1 0
align 1
LABELV $789
char 1 107
char 1 103
char 1 50
char 1 0
align 1
LABELV $784
char 1 117
char 1 105
char 1 95
char 1 109
char 1 121
char 1 116
char 1 101
char 1 97
char 1 109
char 1 0
align 1
LABELV $783
char 1 117
char 1 105
char 1 95
char 1 114
char 1 97
char 1 110
char 1 107
char 1 67
char 1 104
char 1 97
char 1 110
char 1 103
char 1 101
char 1 0
align 1
LABELV $780
char 1 110
char 1 102
char 1 114
char 1 0
align 1
LABELV $777
char 1 32
char 1 37
char 1 115
char 1 32
char 1 34
char 1 37
char 1 115
char 1 34
char 1 0
align 1
LABELV $772
char 1 32
char 1 34
char 1 37
char 1 115
char 1 34
char 1 0
align 1
LABELV $771
char 1 115
char 1 112
char 1 100
char 1 0
align 1
LABELV $722
char 1 112
char 1 114
char 1 97
char 1 105
char 1 115
char 1 101
char 1 0
align 1
LABELV $721
char 1 107
char 1 105
char 1 108
char 1 108
char 1 95
char 1 103
char 1 97
char 1 117
char 1 110
char 1 116
char 1 108
char 1 101
char 1 116
char 1 0
align 1
LABELV $720
char 1 100
char 1 101
char 1 97
char 1 116
char 1 104
char 1 95
char 1 105
char 1 110
char 1 115
char 1 117
char 1 108
char 1 116
char 1 0
align 1
LABELV $719
char 1 116
char 1 97
char 1 117
char 1 110
char 1 116
char 1 0
align 1
LABELV $718
char 1 107
char 1 105
char 1 108
char 1 108
char 1 95
char 1 105
char 1 110
char 1 115
char 1 117
char 1 108
char 1 116
char 1 0
align 1
LABELV $711
char 1 37
char 1 115
char 1 58
char 1 32
char 1 37
char 1 99
char 1 37
char 1 99
char 1 37
char 1 115
char 1 0
align 1
LABELV $708
char 1 40
char 1 37
char 1 115
char 1 41
char 1 58
char 1 32
char 1 37
char 1 99
char 1 37
char 1 99
char 1 37
char 1 115
char 1 0
align 1
LABELV $703
char 1 91
char 1 37
char 1 115
char 1 93
char 1 58
char 1 32
char 1 37
char 1 99
char 1 37
char 1 99
char 1 37
char 1 115
char 1 0
align 1
LABELV $648
char 1 37
char 1 115
char 1 10
char 1 0
align 1
LABELV $600
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 32
char 1 99
char 1 104
char 1 97
char 1 116
char 1 32
char 1 109
char 1 101
char 1 109
char 1 111
char 1 114
char 1 121
char 1 32
char 1 115
char 1 105
char 1 122
char 1 101
char 1 32
char 1 61
char 1 32
char 1 37
char 1 100
char 1 10
char 1 0
align 1
LABELV $598
char 1 115
char 1 99
char 1 114
char 1 105
char 1 112
char 1 116
char 1 115
char 1 47
char 1 109
char 1 97
char 1 108
char 1 101
char 1 53
char 1 46
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 0
align 1
LABELV $596
char 1 115
char 1 99
char 1 114
char 1 105
char 1 112
char 1 116
char 1 115
char 1 47
char 1 109
char 1 97
char 1 108
char 1 101
char 1 52
char 1 46
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 0
align 1
LABELV $594
char 1 115
char 1 99
char 1 114
char 1 105
char 1 112
char 1 116
char 1 115
char 1 47
char 1 109
char 1 97
char 1 108
char 1 101
char 1 51
char 1 46
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 0
align 1
LABELV $592
char 1 115
char 1 99
char 1 114
char 1 105
char 1 112
char 1 116
char 1 115
char 1 47
char 1 109
char 1 97
char 1 108
char 1 101
char 1 50
char 1 46
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 0
align 1
LABELV $590
char 1 115
char 1 99
char 1 114
char 1 105
char 1 112
char 1 116
char 1 115
char 1 47
char 1 109
char 1 97
char 1 108
char 1 101
char 1 49
char 1 46
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 0
align 1
LABELV $588
char 1 115
char 1 99
char 1 114
char 1 105
char 1 112
char 1 116
char 1 115
char 1 47
char 1 102
char 1 101
char 1 109
char 1 97
char 1 108
char 1 101
char 1 51
char 1 46
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 0
align 1
LABELV $586
char 1 115
char 1 99
char 1 114
char 1 105
char 1 112
char 1 116
char 1 115
char 1 47
char 1 102
char 1 101
char 1 109
char 1 97
char 1 108
char 1 101
char 1 50
char 1 46
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 0
align 1
LABELV $585
char 1 115
char 1 99
char 1 114
char 1 105
char 1 112
char 1 116
char 1 115
char 1 47
char 1 102
char 1 101
char 1 109
char 1 97
char 1 108
char 1 101
char 1 49
char 1 46
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 0
align 1
LABELV $576
char 1 125
char 1 0
align 1
LABELV $567
char 1 94
char 1 49
char 1 101
char 1 120
char 1 112
char 1 101
char 1 99
char 1 116
char 1 101
char 1 100
char 1 32
char 1 123
char 1 32
char 1 102
char 1 111
char 1 117
char 1 110
char 1 100
char 1 32
char 1 37
char 1 115
char 1 32
char 1 105
char 1 110
char 1 32
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 32
char 1 99
char 1 104
char 1 97
char 1 116
char 1 32
char 1 102
char 1 105
char 1 108
char 1 101
char 1 58
char 1 32
char 1 37
char 1 115
char 1 10
char 1 0
align 1
LABELV $566
char 1 123
char 1 0
align 1
LABELV $557
char 1 94
char 1 49
char 1 101
char 1 120
char 1 112
char 1 101
char 1 99
char 1 116
char 1 101
char 1 100
char 1 32
char 1 103
char 1 101
char 1 110
char 1 100
char 1 101
char 1 114
char 1 32
char 1 110
char 1 111
char 1 116
char 1 32
char 1 102
char 1 111
char 1 117
char 1 110
char 1 100
char 1 32
char 1 105
char 1 110
char 1 32
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 32
char 1 99
char 1 104
char 1 97
char 1 116
char 1 32
char 1 102
char 1 105
char 1 108
char 1 101
char 1 58
char 1 32
char 1 37
char 1 115
char 1 10
char 1 0
align 1
LABELV $556
char 1 110
char 1 101
char 1 117
char 1 116
char 1 101
char 1 114
char 1 0
align 1
LABELV $553
char 1 109
char 1 97
char 1 108
char 1 101
char 1 0
align 1
LABELV $550
char 1 102
char 1 101
char 1 109
char 1 97
char 1 108
char 1 101
char 1 0
align 1
LABELV $540
char 1 37
char 1 115
char 1 0
align 1
LABELV $539
char 1 94
char 1 49
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 32
char 1 99
char 1 104
char 1 97
char 1 116
char 1 32
char 1 102
char 1 105
char 1 108
char 1 101
char 1 32
char 1 116
char 1 111
char 1 111
char 1 32
char 1 108
char 1 97
char 1 114
char 1 103
char 1 101
char 1 58
char 1 32
char 1 37
char 1 115
char 1 32
char 1 105
char 1 115
char 1 32
char 1 37
char 1 105
char 1 44
char 1 32
char 1 109
char 1 97
char 1 120
char 1 32
char 1 97
char 1 108
char 1 108
char 1 111
char 1 119
char 1 101
char 1 100
char 1 32
char 1 105
char 1 115
char 1 32
char 1 37
char 1 105
char 1 0
align 1
LABELV $536
char 1 94
char 1 49
char 1 118
char 1 111
char 1 105
char 1 99
char 1 101
char 1 32
char 1 99
char 1 104
char 1 97
char 1 116
char 1 32
char 1 102
char 1 105
char 1 108
char 1 101
char 1 32
char 1 110
char 1 111
char 1 116
char 1 32
char 1 102
char 1 111
char 1 117
char 1 110
char 1 100
char 1 58
char 1 32
char 1 37
char 1 115
char 1 10
char 1 0
align 1
LABELV $529
char 1 48
char 1 0
align 1
LABELV $528
char 1 99
char 1 103
char 1 95
char 1 116
char 1 104
char 1 105
char 1 114
char 1 100
char 1 80
char 1 101
char 1 114
char 1 115
char 1 111
char 1 110
char 1 0
align 1
LABELV $526
char 1 115
char 1 101
char 1 116
char 1 32
char 1 103
char 1 95
char 1 115
char 1 121
char 1 110
char 1 99
char 1 104
char 1 114
char 1 111
char 1 110
char 1 111
char 1 117
char 1 115
char 1 99
char 1 108
char 1 105
char 1 101
char 1 110
char 1 116
char 1 115
char 1 32
char 1 49
char 1 32
char 1 59
char 1 32
char 1 114
char 1 101
char 1 99
char 1 111
char 1 114
char 1 100
char 1 32
char 1 37
char 1 115
char 1 32
char 1 10
char 1 0
align 1
LABELV $519
char 1 117
char 1 105
char 1 95
char 1 109
char 1 97
char 1 116
char 1 99
char 1 104
char 1 83
char 1 116
char 1 97
char 1 114
char 1 116
char 1 84
char 1 105
char 1 109
char 1 101
char 1 0
align 1
LABELV $515
char 1 66
char 1 69
char 1 71
char 1 73
char 1 78
char 1 95
char 1 68
char 1 85
char 1 69
char 1 76
char 1 0
align 1
LABELV $514
char 1 83
char 1 86
char 1 73
char 1 78
char 1 71
char 1 65
char 1 77
char 1 69
char 1 0
align 1
LABELV $503
char 1 67
char 1 71
char 1 95
char 1 77
char 1 97
char 1 112
char 1 82
char 1 101
char 1 115
char 1 116
char 1 97
char 1 114
char 1 116
char 1 10
char 1 0
align 1
LABELV $306
char 1 64
char 1 0
align 1
LABELV $303
char 1 58
char 1 0
align 1
LABELV $300
char 1 61
char 1 0
align 1
LABELV $267
char 1 98
char 1 111
char 1 116
char 1 95
char 1 109
char 1 105
char 1 110
char 1 112
char 1 108
char 1 97
char 1 121
char 1 101
char 1 114
char 1 115
char 1 0
align 1
LABELV $266
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 98
char 1 111
char 1 116
char 1 109
char 1 105
char 1 110
char 1 112
char 1 108
char 1 97
char 1 121
char 1 101
char 1 114
char 1 115
char 1 0
align 1
LABELV $265
char 1 103
char 1 95
char 1 110
char 1 101
char 1 101
char 1 100
char 1 112
char 1 97
char 1 115
char 1 115
char 1 0
align 1
LABELV $264
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 110
char 1 101
char 1 101
char 1 100
char 1 112
char 1 97
char 1 115
char 1 115
char 1 0
align 1
LABELV $263
char 1 115
char 1 118
char 1 95
char 1 104
char 1 111
char 1 115
char 1 116
char 1 110
char 1 97
char 1 109
char 1 101
char 1 0
align 1
LABELV $262
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 104
char 1 111
char 1 115
char 1 116
char 1 110
char 1 97
char 1 109
char 1 101
char 1 0
align 1
LABELV $260
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 100
char 1 109
char 1 102
char 1 108
char 1 97
char 1 103
char 1 115
char 1 0
align 1
LABELV $258
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 109
char 1 97
char 1 120
char 1 99
char 1 108
char 1 105
char 1 101
char 1 110
char 1 116
char 1 115
char 1 0
align 1
LABELV $256
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 116
char 1 105
char 1 109
char 1 101
char 1 108
char 1 105
char 1 109
char 1 105
char 1 116
char 1 0
align 1
LABELV $254
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 99
char 1 97
char 1 112
char 1 116
char 1 117
char 1 114
char 1 101
char 1 108
char 1 105
char 1 109
char 1 105
char 1 116
char 1 0
align 1
LABELV $252
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 100
char 1 117
char 1 101
char 1 108
char 1 108
char 1 105
char 1 109
char 1 105
char 1 116
char 1 0
align 1
LABELV $250
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 102
char 1 114
char 1 97
char 1 103
char 1 108
char 1 105
char 1 109
char 1 105
char 1 116
char 1 0
align 1
LABELV $248
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 103
char 1 97
char 1 109
char 1 101
char 1 116
char 1 121
char 1 112
char 1 101
char 1 0
align 1
LABELV $245
char 1 103
char 1 95
char 1 98
char 1 108
char 1 117
char 1 101
char 1 84
char 1 101
char 1 97
char 1 109
char 1 0
align 1
LABELV $241
char 1 103
char 1 95
char 1 114
char 1 101
char 1 100
char 1 84
char 1 101
char 1 97
char 1 109
char 1 0
align 1
LABELV $239
char 1 109
char 1 97
char 1 112
char 1 115
char 1 47
char 1 37
char 1 115
char 1 46
char 1 98
char 1 115
char 1 112
char 1 0
align 1
LABELV $236
char 1 117
char 1 105
char 1 95
char 1 97
char 1 98
char 1 111
char 1 117
char 1 116
char 1 95
char 1 109
char 1 97
char 1 112
char 1 110
char 1 97
char 1 109
char 1 101
char 1 0
align 1
LABELV $235
char 1 109
char 1 97
char 1 112
char 1 110
char 1 97
char 1 109
char 1 101
char 1 0
align 1
LABELV $234
char 1 115
char 1 118
char 1 95
char 1 109
char 1 97
char 1 120
char 1 99
char 1 108
char 1 105
char 1 101
char 1 110
char 1 116
char 1 115
char 1 0
align 1
LABELV $232
char 1 116
char 1 105
char 1 109
char 1 101
char 1 108
char 1 105
char 1 109
char 1 105
char 1 116
char 1 0
align 1
LABELV $230
char 1 99
char 1 97
char 1 112
char 1 116
char 1 117
char 1 114
char 1 101
char 1 108
char 1 105
char 1 109
char 1 105
char 1 116
char 1 0
align 1
LABELV $228
char 1 100
char 1 117
char 1 101
char 1 108
char 1 95
char 1 102
char 1 114
char 1 97
char 1 103
char 1 108
char 1 105
char 1 109
char 1 105
char 1 116
char 1 0
align 1
LABELV $226
char 1 102
char 1 114
char 1 97
char 1 103
char 1 108
char 1 105
char 1 109
char 1 105
char 1 116
char 1 0
align 1
LABELV $224
char 1 116
char 1 101
char 1 97
char 1 109
char 1 102
char 1 108
char 1 97
char 1 103
char 1 115
char 1 0
align 1
LABELV $222
char 1 100
char 1 109
char 1 102
char 1 108
char 1 97
char 1 103
char 1 115
char 1 0
align 1
LABELV $219
char 1 37
char 1 105
char 1 0
align 1
LABELV $218
char 1 103
char 1 95
char 1 103
char 1 97
char 1 109
char 1 101
char 1 116
char 1 121
char 1 112
char 1 101
char 1 0
align 1
LABELV $130
char 1 102
char 1 111
char 1 108
char 1 108
char 1 111
char 1 119
char 1 102
char 1 108
char 1 97
char 1 103
char 1 99
char 1 97
char 1 114
char 1 114
char 1 105
char 1 101
char 1 114
char 1 0
align 1
LABELV $129
char 1 114
char 1 101
char 1 116
char 1 117
char 1 114
char 1 110
char 1 102
char 1 108
char 1 97
char 1 103
char 1 0
align 1
LABELV $128
char 1 102
char 1 111
char 1 108
char 1 108
char 1 111
char 1 119
char 1 109
char 1 101
char 1 0
align 1
LABELV $127
char 1 99
char 1 97
char 1 109
char 1 112
char 1 0
align 1
LABELV $126
char 1 112
char 1 97
char 1 116
char 1 114
char 1 111
char 1 108
char 1 0
align 1
LABELV $125
char 1 100
char 1 101
char 1 102
char 1 101
char 1 110
char 1 100
char 1 102
char 1 108
char 1 97
char 1 103
char 1 0
align 1
LABELV $124
char 1 100
char 1 101
char 1 102
char 1 101
char 1 110
char 1 100
char 1 0
align 1
LABELV $123
char 1 111
char 1 102
char 1 102
char 1 101
char 1 110
char 1 115
char 1 101
char 1 0
align 1
LABELV $122
char 1 103
char 1 101
char 1 116
char 1 102
char 1 108
char 1 97
char 1 103
char 1 0
